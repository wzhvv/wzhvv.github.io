<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JavaWeb开发</title>
      <link href="/2023/03/23/JavaWeb/"/>
      <url>/2023/03/23/JavaWeb/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaWeb开发"><a href="#JavaWeb开发" class="headerlink" title="JavaWeb开发"></a>JavaWeb开发</h1><h2 id="什么是HTML，CSS"><a href="#什么是HTML，CSS" class="headerlink" title="什么是HTML，CSS"></a>什么是HTML，CSS</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1.HTML：超文本编辑语言</span><br><span class="line">超文本：超越了文本的限制，比普通文本更强大。除了文字信息，还可以定义图片，音频，视频等内容。</span><br><span class="line">标记语言：由标签构成的语言</span><br><span class="line">      HTML标签都是预定义好的。例如：使用<span class="tag">&lt;<span class="name">a</span>&gt;</span>展示超链接，使用<span class="tag">&lt;<span class="name">img</span>&gt;</span>展示图片，<span class="tag">&lt;<span class="name">video</span>&gt;</span>展示视频。</span><br><span class="line">      HTML代码直接在浏览器中运行，HTML标签由浏览器解析</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">CSS：层叠样式表，用于控制页面的样式(表现)</span><br></pre></td></tr></table></figure><h2 id="HTML快速入门"><a href="#HTML快速入门" class="headerlink" title="HTML快速入门"></a>HTML快速入门</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>HTML入门<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>HELLO HTML<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">&quot;v2-ed0f23aed22d79c440935c9d1b0eb580_r.jpg&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>HTML标签不区分大小写</p></li><li><p>HTML标签属性值单双引号都可以</p></li><li><p>HTML语法松散</p><p>!加回车自动生成标准结构</p></li></ul><h3 id="新闻排版"><a href="#新闻排版" class="headerlink" title="新闻排版"></a>新闻排版</h3><ul><li>图片标签：<img><ul><li>src：指定图像的url(绝对路径&#x2F;相对路径)</li><li>width：图像的宽度(像素&#x2F;相对于父元素的百分比)</li><li>height：图像的高度(像素&#x2F;相对于父元素的百分比)</li></ul></li><li>标题标签：<h1>-<h6></li><li>水平线标签：<hr></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 文件类型为HTML --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 字符集为UTF-8 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置浏览器兼容性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>焦点访谈：中国底气 新思想夯实大国粮仓<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- src:图片资源路径 width：宽度(px:像素；%:相对于父元素的百分比) height：高度(px:像素；%:相对于父元素的百分比) --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 路径书写方式：</span></span><br><span class="line"><span class="comment">    绝对路径：</span></span><br><span class="line"><span class="comment">    1.绝对路径磁盘：</span></span><br><span class="line"><span class="comment">    2.绝对网络路径：</span></span><br><span class="line"><span class="comment">    相对路径：</span></span><br><span class="line"><span class="comment">    ./:当前目录，./可以省略</span></span><br><span class="line"><span class="comment">    ../:上一级目录</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/news_logo.png&quot;</span>&gt;</span>新浪政务&gt;正文</span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">h1</span>&gt;</span>焦点访谈：中国底气 新思想夯实大国粮仓<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">   2023年03月02日 21:50 央视网</span><br><span class="line">   <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="新闻样式"><a href="#新闻样式" class="headerlink" title="新闻样式"></a>新闻样式</h3><p>CSS引入方式：</p><ul><li>行内样式：写在标签的style属性中(不推荐)</li><li>内嵌样式：写在style标签中(可以写在页面任何位置，但通常约定写在head标签中)</li><li>外嵌样式：写在一个单独的.css文件中(需要通过link标签在网页中引入)</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>焦点访谈：中国底气 新思想夯实大国粮仓<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 方式二：内嵌样式 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;style&gt;</span></span><br><span class="line"><span class="comment">        h1&#123;</span></span><br><span class="line"><span class="comment">            /* color: aqua; */</span></span><br><span class="line"><span class="comment">            /* color:rgb(0, 0, 255); */</span></span><br><span class="line"><span class="comment">            color:#ff0000;  /* 可简写为#f00 */</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &lt;/style&gt; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 方式三：外嵌样式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./css/news.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/news_logo.png&quot;</span>&gt;</span>新浪政务&gt;正文</span><br><span class="line">   <span class="comment">&lt;!-- 方式一：行内样式 --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- &lt;h1 style=&quot;color: red;&quot;&gt;焦点访谈：中国底气 新思想夯实大国粮仓&lt;/h1&gt; --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h1</span> &gt;</span>焦点访谈：中国底气 新思想夯实大国粮仓<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">   2023年03月02日 21:50 央视网</span><br><span class="line">   <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>颜色表示形式</li></ul><table><thead><tr><th align="center">表示方式</th><th>表示含义</th><th>取值</th></tr></thead><tbody><tr><td align="center">关键字</td><td>预定义的颜色名</td><td>red,green,blue…</td></tr><tr><td align="center">rgb表示法</td><td>红绿蓝三原色，每项取值范围：0-255</td><td>rgb(0,0,0),rgb(255,255,255),rgb(255,0,0)</td></tr><tr><td align="center">十六进制表示法</td><td>#开头，将数字转换成十六进制表示</td><td>#000000,#ff0000，简写：#000</td></tr></tbody></table><ul><li>CSS选择器：用来选取需要设置样式的元素(标签)</li></ul><ol><li>元素选择器</li></ol><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">h1</span>&gt;hello css&lt;/<span class="selector-tag">h1</span>&gt;    <span class="selector-tag">h1</span>&#123;&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>id选择器</li></ol><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">h1</span> id=&quot;hid&quot;&gt;css id selector&lt;/<span class="selector-tag">h1</span>&gt;   <span class="selector-id">#hid</span>&#123;&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>类选择器</li></ol><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">h1</span> class=&quot;cls&quot;&gt;css class selector&lt;/<span class="selector-tag">h1</span>&gt;  <span class="selector-class">.cls</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>注：<span>是一个开发网页时大量会用到的没有语义的布局标签</p><p>一行可以显示多个(组合行内元素)，宽度和高度默认由内容撑开</p><p>优先级：</p><ul><li>id选择器&gt;类选择器&gt;元素选择器</li></ul><h3 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h3><ul><li>标签</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;...&quot;</span> <span class="attr">target</span>=<span class="string">&quot;...&quot;</span>&gt;</span>央视网<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>属性</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">href：指定资源访问的url</span><br><span class="line">target：指定在何处打开资源链接</span><br><span class="line">_self：默认值，在当前页面打开</span><br><span class="line">_blank：在空白页面打开</span><br></pre></td></tr></table></figure><h3 id="正文排版"><a href="#正文排版" class="headerlink" title="正文排版"></a>正文排版</h3><ul><li>视频标签：<video></li></ul><ol><li>src：规定视频的url</li><li>controls：显示播放控件</li><li>width：播放器的宽度</li><li>height：播放器的高度</li></ol><ul><li>音频标签：<audio></li></ul><ol><li>src：规定音频的url</li><li>controls：显示播放控件</li></ol><ul><li>段落标签：<p></li><li>文本加粗标签：<b> &#x2F; <strong></li><li>换行，段落标签：换行-<br> 段落：<p></li><li>CSS样式：</li></ul><ol><li>line-height：设置行高</li><li>text-indent：定义第一个行内容的缩进</li><li>text-align：规定元素中的文本的水平对齐方式</li></ol><ul><li>注意：在HTML中无论输入多少个空格，只会显示一个。可以使用空格占用符：&amp;nbsp</li></ul><h3 id="页面布局"><a href="#页面布局" class="headerlink" title="页面布局"></a>页面布局</h3><p><img src="/JavaWeb.assets/Snipaste_2023-07-03_17-10-06-1688429275539.png" alt="Snipaste_2023-07-03_17-10-06"></p><ul><li><p>布局标签：实际开发网页中，会大量频繁的使用div和span这两个没有语义的布局标签。</p></li><li><p>标签：<div> <span></p></li><li><p>特点：</p><ul><li>div标签：</li></ul><ol><li>一行只显示一个(独占一行)</li><li>宽度默认是父元素的宽度，高度默认由内容撑开</li><li>可以设置宽高(width,height)</li></ol><ul><li>span标签：</li></ul><ol><li>一行可以显示多个</li><li>宽度和高度默认由内容撑开</li><li>不可以设置宽高(width,height)</li></ol></li></ul><h3 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h3><ul><li>场景：在网页中以表格(行，列)形式整齐展示数据，如：班级表</li><li>标签：</li></ul><table><thead><tr><th align="center">标签</th><th>描述</th><th>属性&#x2F;备注</th></tr></thead><tbody><tr><td align="center"><table></td><td>定义表格整体，可以包裹多个<tr></td><td>border：规定表格边框的宽度  width：规定表格的宽度 cellspacing：规定单元之间的空间</td></tr><tr><td align="center"><tr></td><td>表格的行，可以包裹多个<td></td><td></td></tr><tr><td align="center"><td></td><td>表格单元格(普通)，可以包裹内容</td><td>如果是表头单元格，可以替换为<th></td></tr></tbody></table><h3 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h3><ul><li>场景：在网页中主要负责数据采集功能，如 注册，登录等数据采集</li><li>标签：<form></li><li>表单项：不同类型的input元素，下拉列表，文本域等</li></ul><ol><li><p><input>：定义表达项，通过type属性控制输入形式</p></li><li><p><select >：定义下拉列表</p></li><li><textarea>：定义文本域</li></ol><ul><li>属性：</li></ul><ol><li>action：规定当提交表单时向何处发送表单数据，url。如果不指定，默认提交到当前页面</li><li>method：规定用于发送表单数据的方式。</li></ol><ul><li>get：在url后面拼接表单数据，比如：?username&#x3D;Jack&amp;age&#x3D;10，url长度有限制。默认值</li><li>post：在消息体(请求体)中传递的，参数大小无限制</li></ul><h3 id="表单项标签"><a href="#表单项标签" class="headerlink" title="表单项标签"></a>表单项标签</h3><p><img src="/JavaWeb.assets/Snipaste_2023-07-04_09-38-56.png" alt="Snipaste_2023-07-04_09-38-56"></p><h2 id="Web入门"><a href="#Web入门" class="headerlink" title="Web入门"></a>Web入门</h2><h3 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h3><ol><li>Web服务器</li></ol><ul><li>对HTTP协议操作进行封装，简化web程序开发</li><li>部署web项目，对外提供网上信息浏览服务</li></ul><ol start="2"><li>Toncat</li></ol><ul><li>一个轻量级的web服务器，支持servlet，jsp等少量javaEE规范</li><li>也被称为web容器，servlet容器。</li></ul><h3 id="分层解耦"><a href="#分层解耦" class="headerlink" title="分层解耦"></a>分层解耦</h3><h4 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构"></a>三层架构</h4><ul><li>controller：控制层，接收前端发送的请求，对请求进行处理，并响应数据。</li><li>service：业务逻辑层，处理具体的业务逻辑。</li><li>dao：数据访问层(Data Access Object)(持久层)，负责数据访问操作，包括数据的增，删，改，查。</li></ul><p><img src="https://raw.githubusercontent.com/wzhvv/image/main/image/202307081007884.png" alt="image-20230708100752745"></p><p><img src="https://raw.githubusercontent.com/wzhvv/image/main/image/202307081014914.png" alt="image-20230708101418774"></p><p><img src="https://raw.githubusercontent.com/wzhvv/image/main/image/202307081014895.png" alt="image-20230708101429777"></p><p><img src="https://raw.githubusercontent.com/wzhvv/image/main/image/202307081014664.png" alt="image-20230708101445559"></p><p><img src="https://raw.githubusercontent.com/wzhvv/image/main/image/202307081014270.png" alt="image-20230708101453102"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Resource</span> 与 <span class="meta">@Autowired</span> 区别</span><br><span class="line">    <span class="meta">@Autowired</span>是spring框架提供的注解，而<span class="meta">@Resource</span>是JDK提供的注解</span><br><span class="line">    <span class="meta">@Autowired</span>默认是按照类型注入，而<span class="meta">@Resource</span>默认是按照名称注入</span><br></pre></td></tr></table></figure><h4 id="数据连接池"><a href="#数据连接池" class="headerlink" title="数据连接池"></a>数据连接池</h4><p><img src="https://raw.githubusercontent.com/wzhvv/image/main/image/202307141648609.png" alt="image-20230714164804494"></p><p><img src="https://raw.githubusercontent.com/wzhvv/image/main/image/202307141648406.png" alt="image-20230714164827280"></p><p><img src="https://raw.githubusercontent.com/wzhvv/image/main/image/202307141650771.png" alt="image-20230714165035652"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>maven</title>
      <link href="/2023/03/19/maven/"/>
      <url>/2023/03/19/maven/</url>
      
        <content type="html"><![CDATA[<h1 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h1><h2 id="maven基础概念"><a href="#maven基础概念" class="headerlink" title="maven基础概念"></a>maven基础概念</h2><h3 id="Maven的作用"><a href="#Maven的作用" class="headerlink" title="Maven的作用"></a>Maven的作用</h3><ul><li>依赖管理：方便快捷的管理项目依赖的资源(jar包)，避免版本冲突问题</li><li>统一项目结构：提供标准，统一的项目结构</li><li>项目构建：标准跨平台(Linux,Windows,MacOS)的自动化项目构建方式</li></ul><h3 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h3><ul><li>仓库：用于存储资源，包含各种jar包</li><li>仓库分类：</li></ul><ol><li><p>本地仓库：自己电脑上存储资源的仓库，连接远程仓库获取资源</p></li><li><p>远程仓库：非本机电脑上的仓库，为本地仓库提供资源</p><p>中央仓库：Maven团队维护，存储所有资源的仓库</p><p>私服：部门&#x2F;公司范围内存储资源的仓库，从中央仓库获取资源</p></li><li><p>私服的作用：</p><p>保存具有版权的资源，包含购买和自主研发的jar</p><p>中央仓库中的jar都是开源的，不能存储具有版权的资源</p><p>一定范围内共享资源，仅对内部开放，不对外共享</p></li></ol><h3 id="坐标"><a href="#坐标" class="headerlink" title="坐标"></a>坐标</h3><ul><li>定义：</li></ul><ol><li>Maven中的坐标是资源的唯一标识，通过该坐标可以唯一定位资源位置。</li><li>使用坐标来定义项目或引入项目中的依赖。</li></ol><ul><li>Maven坐标主要组成</li></ul><ol><li>groupId：定义当前Maven项目隶属组织名称(通常是域名反写)</li><li>artifactId：定义当前Maven项目名称(通常是模块名称)</li><li>version：定义当前项目版本号</li></ol><h3 id="依赖配置"><a href="#依赖配置" class="headerlink" title="依赖配置"></a>依赖配置</h3><ul><li>依赖：指当前项目运行所需要的jar包，一个项目中可以引入多个依赖。</li><li>配置：</li></ul><ol><li>在pom.xml中编写<dependencies>标签</li><li>在<dependencies>标签中 使用<dependency>引入坐标</li><li>定义坐标的groupId artifactId version</li><li>点击刷新按钮，引入最新加入的坐标</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">注意事项：</span><br><span class="line">如果引入的依赖，在本地仓库不存在，将会连接远程仓库/中央仓库，然后下载依赖。</span><br><span class="line">如果不知道依赖的坐标信息，可以到https://mvnrepository.com/中搜索</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring学习</title>
      <link href="/2023/03/16/Spring/"/>
      <url>/2023/03/16/Spring/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><h2 id="1-充分解耦"><a href="#1-充分解耦" class="headerlink" title="1. 充分解耦"></a>1. 充分解耦</h2><ul><li>使用IOC容器管理bean(IOC)</li><li>在IOC容器内将有依赖关系的bean进行关系绑定(DI)</li><li>最终效果：使用对象时不仅可以直接从IOC容器中获取，并且获取到的bean已经绑定了所有的依赖关系</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>多线程随记</title>
      <link href="/2023/03/16/openmp/"/>
      <url>/2023/03/16/openmp/</url>
      
        <content type="html"><![CDATA[<h1 id="openmp多线程"><a href="#openmp多线程" class="headerlink" title="openmp多线程"></a>openmp多线程</h1><h2 id="1"><a href="#1" class="headerlink" title="1"></a>1</h2><ol><li>firstprivate</li></ol><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">firstprivate</span>(a)在多线程中a继承主线程中a的值，不干预其他线程的值</span><br></pre></td></tr></table></figure><ol start="2"><li>lastprivate</li></ol><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">lastprivate</span>(a)必须在有<span class="keyword">for</span>的多线程中使用，并继承最后的值</span><br></pre></td></tr></table></figure><ol start="3"><li>threadprivate</li></ol><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#omp <span class="keyword">pragma</span> threadprivate(a)只能定义全局变量，且a可以在相同线程继承，不能在其他线程互通</span></span><br></pre></td></tr></table></figure><h2 id="2"><a href="#2" class="headerlink" title="2"></a>2</h2><h3 id="schedule-实现工作量的划分和调度"><a href="#schedule-实现工作量的划分和调度" class="headerlink" title="schedule(实现工作量的划分和调度)"></a>schedule(实现工作量的划分和调度)</h3><ol><li>static</li></ol><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">schedule(<span class="type">static</span>,size)  size为每次调度的迭代数量</span><br><span class="line">    将每次循环迭代划分为大小相等的块，</span><br></pre></td></tr></table></figure><ol start="2"><li>dynamic</li></ol><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">schedule(dynamic)   size默认<span class="number">1</span></span><br><span class="line">    将计算任务分配给各个线程，谁快谁干得多</span><br></pre></td></tr></table></figure><ol start="3"><li>guided</li></ol><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">schedule(guided)  与dynamic类似，但是块的大小一开始比较大，后来逐渐减少，从而减少了线程访问队列的时间</span><br></pre></td></tr></table></figure><ol start="4"><li>runtime</li></ol><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">schedule(runtime)  运行过程中根据环境变量OMP_SCHEDULE来确定调度的类型，运行调度的实现仍然是上述三种调度方式的一种</span><br></pre></td></tr></table></figure><h2 id="3"><a href="#3" class="headerlink" title="3"></a>3</h2><h3 id="数据竞争"><a href="#数据竞争" class="headerlink" title="数据竞争"></a>数据竞争</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> omp critical的作用：</span></span><br><span class="line">各个线程并行执行<span class="keyword">for</span>里面的语句，但当执行<span class="number">1</span>到critical里面时，要注意有没有其他线程正在里面执行。如果有的话，要等其他线程执行完再进去执行。这样避免了race condition问题。</span><br><span class="line">    显而易见，它的执行速度会变低，因为可能存在线程等待的情况。</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">reduction</span>(+:sum)的作用：</span><br><span class="line">    告诉编译器：下面的<span class="keyword">for</span>循环要分成多个线程跑，但每个线程都要保存变量sum的拷贝，循环结束后，所有线程把自己的sum累加起来作为最后的输出。</span><br><span class="line">    reduction虽然方便，但它只支持一些基本操作，比如+，*，&amp;，|，^,&amp;&amp;,||八种</span><br></pre></td></tr></table></figure><h4 id="数据竞争原因"><a href="#数据竞争原因" class="headerlink" title="数据竞争原因"></a>数据竞争原因</h4><ul><li>多个线程访问同一个变量</li><li>线程之间没有同步机制，或者一个线程要执行写操作</li></ul><h4 id="避免数据竞争的方法"><a href="#避免数据竞争的方法" class="headerlink" title="避免数据竞争的方法"></a>避免数据竞争的方法</h4><ul><li>尽量使用私有变量</li><li>尽量在并行区域内使用局部变量</li><li>对并行区域外的变量进行读操作，尽量使用const类型</li><li>对并行区域外的变量进行写操作，用锁函数，原子操作，临界指令等包含数据</li></ul><h2 id="4"><a href="#4" class="headerlink" title="4"></a>4</h2><h3 id="负载平衡"><a href="#负载平衡" class="headerlink" title="负载平衡"></a>负载平衡</h3><p>负载平衡是指将任务平均分配到并行执行系统的各个处理器上，使之充分发挥各个处理器的计算能力</p><p>难点：</p><ol><li>编程人员需要划分程序中的并行执行块。随着核数增多难度增大。d</li><li>负载错误划分会随着CPU核数增加而放大。</li><li>硬件和软件升级会破坏原有的负载平衡。</li></ol><h3 id="静态负载平衡"><a href="#静态负载平衡" class="headerlink" title="静态负载平衡"></a>静态负载平衡</h3><ul><li>人为地将工作区域分成多个可并行执行的部分，并将其均衡地分配给多个处理器运行。</li></ul><h3 id="动态负载平衡"><a href="#动态负载平衡" class="headerlink" title="动态负载平衡"></a>动态负载平衡</h3><ul><li>指在程序执行过程中，任务动态分配从而实现负载平衡。</li><li>系统实现任务调度，程序员只能选择动态平衡的策略，减轻程序员的工作量。</li><li>一般而言，动态平衡的系统性能比静态平衡要好。</li></ul><h2 id="5"><a href="#5" class="headerlink" title="5"></a>5</h2><h3 id="循环工作量划分与调度"><a href="#循环工作量划分与调度" class="headerlink" title="循环工作量划分与调度"></a>循环工作量划分与调度</h3><ul><li>子句schedule实现工作量的划分与调度</li></ul><p>基本原则：</p><ul><li>分解代价低</li><li>任务计算要均衡</li><li>尽量避免Cache(缓存)冲突</li></ul><h3 id="四种调度类型"><a href="#四种调度类型" class="headerlink" title="四种调度类型"></a>四种调度类型</h3><ol><li>静态调度：static</li><li>动态调度：dynamic</li><li>指导性调度：guided</li><li>运行调度：runtime</li></ol><h3 id="三种调度参数"><a href="#三种调度参数" class="headerlink" title="三种调度参数"></a>三种调度参数</h3><ul><li>单调：每个线程递增迭代顺序执行</li><li>非单调：每个线程未指定顺序执行</li><li>向量化simd：根据硬件条件决定适合的向量化调度方式</li></ul><h2 id="6"><a href="#6" class="headerlink" title="6"></a>6</h2><h3 id="子句collapse"><a href="#子句collapse" class="headerlink" title="子句collapse"></a>子句collapse</h3><ul><li><p>子句collapse仅能用于一个嵌套循环</p></li><li><p>将多重循环展开为一个更大的循环，从而增加线程组上划分调度的循环总次数</p></li><li><p>语法格式：collapse(n)</p></li></ul><h2 id="7"><a href="#7" class="headerlink" title="7"></a>7</h2><h3 id="指令sections"><a href="#指令sections" class="headerlink" title="指令sections"></a>指令sections</h3><ul><li>指令sections主要用于非循环代码的循环</li></ul><p><strong>注意事项：</strong></p><ul><li>一个程序可定义多个sections，彼此属于串行，由不同线程组执行。每个sections结构可定义多个section，彼此属于并行，由不同线程执行。</li><li>如果没有使用nowait，则sections结构结束时会有隐藏的barrier。</li><li>sections内部不能存在跳出结构之外的跳转语句。</li></ul><h2 id="8"><a href="#8" class="headerlink" title="8"></a>8</h2><h3 id="指令single"><a href="#指令single" class="headerlink" title="指令single"></a>指令single</h3><p><strong>注意事项：</strong></p><ul><li>一个single结构只能由一个线程(不一定为主线程)执行</li><li>不执行single的其他线程会在single结构结束处等待。若添加nowait，则不会等待</li><li>single内部不能存在跳出结构之外的跳转语句</li></ul><ol><li><p>可以并行的for循环，一般采用指令for分配工作，schedule确定分配方式。</p><p>schedule默认参数为static，均分工作</p><p>如果迭代计算负载差异较大，建议使用dynamic或guided分配方式</p></li><li><p>没有依赖的程序块，可采用指令sections并行</p></li><li><p>#pragma omp for，#pragma omp single，#pragma omp sections都包含隐式barrier</p></li></ol><h2 id="9"><a href="#9" class="headerlink" title="9"></a>9</h2><h3 id="锁函数"><a href="#锁函数" class="headerlink" title="锁函数"></a>锁函数</h3><ul><li>锁是为了保证一块代码或一块内存的一致性，从而使其上的操作串行化</li><li>openmp的锁操作：<ol><li>初始化(initialize)</li><li>上锁(set)</li><li>解锁(unset)</li><li>测试(test)</li><li>销毁(destroy)</li></ol></li></ul><h3 id="简单锁"><a href="#简单锁" class="headerlink" title="简单锁"></a>简单锁</h3><ul><li>简单锁不可以多次上锁，即使是同一个线程也不可以</li></ul><h3 id="嵌套锁"><a href="#嵌套锁" class="headerlink" title="嵌套锁"></a>嵌套锁</h3><ul><li>简单锁是一个一重嵌套锁</li><li>简单锁与嵌套锁的区别在于使用嵌套锁会引起锁计数器从而记录嵌套锁已被上锁次数</li></ul><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><ul><li>所谓死锁：各线程彼此等待对方拥有的资源</li></ul><p><em><strong>出现死锁的四个条件：</strong></em></p><ul><li>访问互斥：线程对资源独占访问，即每次只允许一个线程访问资源</li><li>资源独享：线程占用的资源在未使用结束前，不能被其他线程占用</li><li>等待解除占用：线程占有资源的同时继续请求其他资源，但是申请资源被其他线程占用</li><li>循环等待：线程对资源的请求形成循环链</li></ul><p><em><strong>破除死锁的条件：</strong></em></p><ul><li><p>针对访问互斥：</p><p>对将共享资源转变为私有资源</p><p>按一定顺序获取资源(锁)</p></li><li><p>针对等待解除占用，放弃已占用的资源</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript</title>
      <link href="/2023/03/14/JavaScript/"/>
      <url>/2023/03/14/JavaScript/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript入门"><a href="#JavaScript入门" class="headerlink" title="JavaScript入门"></a>JavaScript入门</h1><h2 id="引入JavaScript"><a href="#引入JavaScript" class="headerlink" title="引入JavaScript"></a>引入JavaScript</h2><ol><li>内部脚本：将JS代码定义在HTML页面中</li></ol><ul><li>JavaScript代码必须位于<script></script>&gt;标签之间</li><li>在HTML文档中，可以在任意地方，放任意数量的<script></li><li>一般会把脚本置于<body>元素的底部，可以改善显示速度</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="string">&quot;hello javascript&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>    //可以出现多次，在html任意位置</span><br></pre></td></tr></table></figure><ol start="2"><li>外部脚本：将JS代码定义在外部JS文件中，然后引入到HTML页面中</li></ol><ul><li><p>外部JS文件中，只包含JS代码，不包含<script>标签</p></li><li><script>标签不能自闭和</li></ul><p>abs.js</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;hello javascript&quot;</span>)</span><br></pre></td></tr></table></figure><p>test.html</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;abs.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><h3 id="书写语法"><a href="#书写语法" class="headerlink" title="书写语法"></a>书写语法</h3><ul><li>区分大小写：与java一样，变量名，函数名以及其他一切东西都是区分大小写的</li><li>每行结尾的分号可有可无</li></ul><h3 id="输出语句"><a href="#输出语句" class="headerlink" title="输出语句"></a>输出语句</h3><ul><li>使用window.alert()写入警告框</li><li>使用document.write()写入HTML输出</li><li>使用console.log()写入浏览器控制台</li></ul><h3 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h3><ul><li>var定义的变量可以存放不同类型的值(javascript是一门弱类型语言)</li><li>作用域比较大，全局变量</li><li>可以重复定义</li></ul><p>变量类型 变量名=变量值;</p><p>js不区分整数和小数:</p><p>NAN          //not a number  (将NAN转换为boolean类型，为false)</p><p>Infinity     //表示无限大</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age=<span class="number">18</span>;</span><br><span class="line"><span class="keyword">var</span> name=<span class="string">&quot;张三&quot;</span>;</span><br></pre></td></tr></table></figure><p>变量名需要遵循如下规则：</p><ul><li>组成字符可以是任何字母，数字，下划线或美元符号</li><li>数字不能开头</li><li>建议使用驼峰命名</li></ul><p>注：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span>关键字定义变量：用法类似于<span class="keyword">var</span>，但是声明的变量，只在<span class="keyword">let</span>关键字所在的代码块内有效，且不允许重复声明</span><br><span class="line"><span class="keyword">const</span>关键字：用来声明一个只读的常量。一但声明，常量的值就不能改变。</span><br><span class="line">使用<span class="keyword">typeof</span>运算符可以获取数据类型。例：<span class="keyword">typeof</span> a</span><br></pre></td></tr></table></figure><h3 id="等于"><a href="#等于" class="headerlink" title="等于"></a>等于</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">==    <span class="comment">//类型不一样，值一样，判断为true</span></span><br><span class="line">===   <span class="comment">//绝对等于，类型不一样，值一样，判断为false</span></span><br></pre></td></tr></table></figure><ul><li>NAN===NAN,这个与所有值都不相等，包括自己。false   </li><li>只能通过isNaN(NaN)来判断这个数是否是NaN</li></ul><h3 id="浮点数问题"><a href="#浮点数问题" class="headerlink" title="浮点数问题"></a>浮点数问题</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>/<span class="number">3</span>)===(<span class="number">1</span>-<span class="number">2</span>/<span class="number">3</span>)<span class="comment">//false</span></span><br></pre></td></tr></table></figure><blockquote><p>尽量避免使用浮点数进行运算，存在精度问题！</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Math</span>.<span class="title function_">abs</span>(<span class="number">1</span>/<span class="number">3</span>-(<span class="number">1</span>-<span class="number">2</span>/<span class="number">3</span>))&lt;<span class="number">0.00000001</span></span><br></pre></td></tr></table></figure><h3 id="null和undefined"><a href="#null和undefined" class="headerlink" title="null和undefined"></a>null和undefined</h3><ul><li>null                    //对象为空 (typeof null ->object)</li><li>undefined        //当声明的变量未初始化时，该变量的默认值是undefined</li></ul><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><ul><li>Java的数值必须是相同类型的对象，JS中不需要这样</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">&#x27;hello&#x27;</span>,<span class="literal">null</span>,<span class="literal">true</span>];<span class="comment">//方式一</span></span><br><span class="line"><span class="keyword">var</span> arr=<span class="keyword">new</span> <span class="title function_">array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">&#x27;hello&#x27;</span>);<span class="comment">//方式二</span></span><br><span class="line">访问：</span><br><span class="line">arr[索引]=值;</span><br><span class="line">特点：长度可变，类型可变</span><br></pre></td></tr></table></figure><p>取数组下标，如果越界了，就会:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="literal">undefined</span></span><br></pre></td></tr></table></figure><ul><li>属性</li></ul><table><thead><tr><th align="center">属性</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">length</td><td align="center">设置或返回数组中元素的数量</td></tr></tbody></table><ul><li>方法</li></ul><table><thead><tr><th align="center">方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">forEach()</td><td align="center">遍历数组中的每个有值的元素，并调用一次传入的函数</td></tr><tr><td align="center">push()</td><td align="center">将新元素添加到数组的末尾，并返回新的长度</td></tr><tr><td align="center">splice()</td><td align="center">从数组中删除元素</td></tr></tbody></table><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><ul><li>对象是大括号，数组中是中括号</li><li>JavaScript中所有的键都是字符串，值是任意对象！</li></ul><blockquote><p>每个属性之间使用逗号隔开，最后一个不需要添加</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> 对象名=&#123;</span><br><span class="line">    属性名: 属性值,</span><br><span class="line">    属性名: 属性值,</span><br><span class="line">    属性名: 属性值,</span><br><span class="line">    函数名称:<span class="keyword">function</span>(<span class="params">形参列表</span>)&#123;&#125;   --函数名称()&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Person person=new Person(1,2,3,4);</span></span><br><span class="line"><span class="keyword">var</span> person&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">3</span>,</span><br><span class="line">    <span class="attr">tags</span>:[<span class="string">&#x27;js&#x27;</span>,<span class="string">&#x27;java&#x27;</span>,<span class="string">&#x27;web&#x27;</span>]      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用一个不存在的对象属性，不会报错！</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">person.<span class="property">haha</span></span><br><span class="line"><span class="literal">undefined</span></span><br></pre></td></tr></table></figure><ul><li>动态的删减属性，通过delete删除对象的属性</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> person.<span class="property">name</span></span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li>动态的添加属性，直接给新的属性添加值即可</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">person.<span class="property">haha</span>=<span class="string">&quot;haha&quot;</span></span><br><span class="line"><span class="string">&quot;haha&quot;</span></span><br></pre></td></tr></table></figure><ul><li>判断属性值是否在这个对象中！xxx in xxx!</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;age&#x27;</span> <span class="keyword">in</span> person</span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li>判断一个属性是否是这个对象自身拥有的 hasOwnProperty()</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">person.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;toString&#x27;</span>)</span><br><span class="line"><span class="literal">false</span></span><br><span class="line">person.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;age&#x27;</span>)</span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="严格检查模式"><a href="#严格检查模式" class="headerlink" title="严格检查模式"></a>严格检查模式</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>    <span class="comment">//严格检查模式，预防Javascript的随意性导致产生的一些问题，必须写在Javascript的第一行</span></span><br><span class="line"><span class="comment">//局部变量建议使用let去定义</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">stricpt</span>&gt;</span></span><br><span class="line">&#x27;use strict&#x27;;</span><br><span class="line">   let i=1; </span><br><span class="line"><span class="tag">&lt;/<span class="name">stricpt</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><ul><li>正常字符串我们使用单引号或双引号包裹</li><li>多行字符串编写</li><li>将字符串字面值转为数字。如果字面值不是数字，则转为NAN</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> msg=</span><br><span class="line">    <span class="string">`hello</span></span><br><span class="line"><span class="string">world</span></span><br><span class="line"><span class="string">你好</span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure><ul><li>模板字符串</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name=<span class="string">&quot;张三&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> age=<span class="number">3</span>;</span><br><span class="line"><span class="keyword">let</span> msg=<span class="string">`你好呀,<span class="subst">$&#123;name&#125;</span>`</span></span><br><span class="line"><span class="comment">//let定义的是局部变量，不可重复声明</span></span><br></pre></td></tr></table></figure><ul><li>字符串的可变性：不可变</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(student[<span class="number">0</span>])---s</span><br><span class="line">student[<span class="number">0</span>]=<span class="number">1</span>---<span class="number">1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(student)---student</span><br></pre></td></tr></table></figure><ul><li>substring</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[)</span><br><span class="line"> student.<span class="title function_">substring</span>(<span class="number">1</span>)  <span class="comment">//从第一个字符串截取到最后一个字符串</span></span><br><span class="line"> student.<span class="title function_">substringt</span>(<span class="number">1</span>,<span class="number">3</span>)  <span class="comment">//[1,3)</span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">chatAt()</td><td align="center">返回在指定位置的字符</td></tr><tr><td align="center">indexOf()</td><td align="center">检索字符串</td></tr><tr><td align="center">trim()</td><td align="center">去除字符串两边的空格</td></tr><tr><td align="center">substring</td><td align="center">提取字符串中两个指定的索引号之间的字符(含头不含尾)</td></tr></tbody></table><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><ul><li>定义：JavaScript函数通过function关键字进行定义，语法为：</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">定义方式<span class="number">1</span>：</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">functionName</span>(<span class="params">参数<span class="number">1</span>，参数<span class="number">2.</span>..</span>)&#123;</span><br><span class="line">    <span class="comment">//要执行的代码</span></span><br><span class="line">&#125;</span><br><span class="line">定义方式<span class="number">2</span>：</span><br><span class="line"><span class="keyword">var</span> functionName=<span class="keyword">function</span>(<span class="params">参数<span class="number">1</span>，参数<span class="number">2.</span>..</span>)&#123;</span><br><span class="line">    <span class="comment">//要执行的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>注意：</li></ul><ol><li>形式参数不需要类型。</li><li>返回值也不需要定义类型，可以在函数内部直接使用return返回即可</li></ol><h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><ul><li>JSON是通过Javascript对象标记法书写的文本</li><li>由于其语法简单。层次结果鲜明，现多用于作为数据载体，在网络中进行数据传输。</li></ul><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">-定义：</span><br><span class="line">var 变量名 = &#x27;<span class="punctuation">&#123;</span><span class="attr">&quot;key1&quot;</span><span class="punctuation">:</span>value1<span class="punctuation">,</span><span class="attr">&quot;key2&quot;</span><span class="punctuation">:</span>value2<span class="punctuation">&#125;</span>&#x27;;</span><br><span class="line">-示例</span><br><span class="line">var userStr=&#x27;<span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;Jerry&quot;</span><span class="punctuation">,</span><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="number">18</span><span class="punctuation">,</span><span class="attr">&quot;addr&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;北京&quot;</span><span class="punctuation">,</span><span class="string">&quot;上海&quot;</span><span class="punctuation">,</span><span class="string">&quot;西安&quot;</span><span class="punctuation">]</span><span class="punctuation">&#125;</span>&#x27;;</span><br><span class="line">-JSON字符串转为JS对象</span><br><span class="line">var jsObject=JSON.parse(userStr);</span><br><span class="line">-JS对象转为JSON字符串</span><br><span class="line">var jsonStr=JSON.stringify(jsObject);</span><br></pre></td></tr></table></figure><h3 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h3><ul><li>概念：浏览器对象模型，允许JavaScript与浏览器对话，JavaScript将浏览器的各个组成部分封装成对象</li><li>组成：</li></ul><ol><li>Window：浏览器窗口对象</li><li>Navigator：浏览器对象</li><li>Screen：屏幕对象</li><li>History：历史记录对象</li><li>Location：地址栏对象</li></ol><h4 id="Window"><a href="#Window" class="headerlink" title="Window"></a>Window</h4><ul><li>获取：直接使用window，其中window.可以省略。</li><li>属性</li></ul><ol><li>history：对History对象的只读引用</li><li>location：用于窗口或框架的Location对象。</li><li>navigator：对Navigator对象的只读引用。</li></ol><ul><li>方法</li></ul><ol><li>alert()：显示带有一段消息和一个确认按钮的警告框。</li><li>confirm()：显示带有一段消息以及确认按钮和取消按钮的对话框。</li><li>setInterval()：按照指定的周期(以毫秒计)来调用函数或计算表达式。</li><li>setTimeout：在指定的毫秒数后调用函数或计算表达式。</li></ol><h4 id="Location"><a href="#Location" class="headerlink" title="Location"></a>Location</h4><ul><li>属性</li></ul><ol><li>href：设置或返回完整的URL。例：location.href="<a href="https://www.baidu.com/">https://www.baidu.com</a>"</li></ol><h3 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h3><p><img src="https://raw.githubusercontent.com/wzhvv/image/main/image/202307070810542.png" alt="Snipaste_2023-07-05_11-00-51"></p><ul><li>HTML中的Element对象可以通过Document对象获取，而Document对象是通过window对象获取的。</li><li>Document对象中提供以下获取Element元素对象的函数</li></ul><ol><li>根据id属性值获取，返回单个Element对象</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> h1=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;h1&#x27;</span>);</span><br></pre></td></tr></table></figure><ol start="2"><li>根据标签名称获取，返回单个Element对象数组</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> divs=<span class="variable language_">document</span>.<span class="title function_">getElementByTagName</span>(<span class="string">&#x27;div&#x27;</span>);</span><br></pre></td></tr></table></figure><ol start="3"><li>根据name属性值获取，返回单个Element对象数组</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> hobbys=<span class="variable language_">document</span>.<span class="title function_">getElementByName</span>(<span class="string">&#x27;hobby&#x27;</span>);</span><br></pre></td></tr></table></figure><ol start="4"><li>根据class属性值获取，返回单个Element对象数组</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">class</span>=<span class="variable language_">document</span>.<span class="title function_">getElementByClassName</span>(<span class="string">&#x27;cls&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><h4 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h4><ul><li>事件：HTML事件是发生在HTML元素上的"事件"。比如：</li></ul><ol><li>按钮被点击</li><li>鼠标移动到元素上</li><li>按下键盘按键</li></ol><ul><li>事件监听：JavaScript可以在事件被侦测到时执行代码。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql学习</title>
      <link href="/2023/03/12/mysql/"/>
      <url>/2023/03/12/mysql/</url>
      
        <content type="html"><![CDATA[<h1 id="基础MYSQL学习"><a href="#基础MYSQL学习" class="headerlink" title="基础MYSQL学习"></a>基础MYSQL学习</h1><h2 id="点击进入学习视频"><a href="#点击进入学习视频" class="headerlink" title="点击进入学习视频"></a><a href="https://www.bilibili.com/video/BV1Kr4y1i7ru?p=1&vd_source=807f4136109f993802c3f5a8bd0986c8">点击进入学习视频</a></h2><h2 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h2><h3 id="库操作"><a href="#库操作" class="headerlink" title="库操作"></a>库操作</h3><ul><li>查询所有数据库—show databases;</li><li>查询当前数据库—select database();</li><li>创建—create database[if not exists] 数据库名 [default charset 字符集] [collate 排序规则];</li><li>删除—drop database [if not exists] 数据库名</li><li>使用—use 数据库名</li></ul><h3 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h3><ul><li><p>创建—create table 表名(</p><p>字段1  字段1类型 [comment] 注释,</p><p>…….</p><p>)[comment 表注释];</p></li><li><p>查询—查询当前数据库所有表—show tables;</p></li></ul><p>​       查询表结构—desc 表名;</p><p>​       查询指定表的建表语句—show create table 表名;</p><ul><li><p>修改</p><p>—添加字段—alter table 表名 add 字段名 类型(长度) [comment 注释] [约束];</p></li></ul><p>​       —修改数据类型—alter table 表名 modify 字段名 新数据类型(长度);</p><p>​       —修改字段名和字段类型—alter table 表名 change 旧字段名 新字段名 类型(长度) [comment 注释] [约束];</p><p>​       —删除字段—alter table 表名 drop 字段名;</p><p>​       —修改表名—alter table 表名 rename to 新表名;</p><ul><li><p>删除</p><p>—删除表—drop table [if exits] 表名;</p></li></ul><p>​       —删除指定表，并重新创建该表，表中数据全被删除，表结构还在—truncate table 表名;</p><h2 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h2><h3 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h3><ul><li><p>insert into 表名 (字段1，字段2，…) values (值1，值2，…)                               —给指定字段添加数据</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into employee(id,name) values(1,&#x27;张三&#x27;);</span><br></pre></td></tr></table></figure></li><li><p>insert into 表名 values (值1，值2，…)                                                                —给全部字段添加数据</p></li><li><p>insert into 表名 (字段1，字段2，…) values (值1，值2，…),(值1，值2，…);    </p><p>insert into 表名 values (值1，值2，…),(值1，值2，…),(值1，值2，…);            —批量添加数据</p><ul><li><em><strong>注意：</strong></em></li><li>插入数据时，指定的字段顺序需要与值的顺序是一一对应的</li><li><strong>字符串和日期型数据应该包含在引号中</strong></li><li>插入的数据大小，应该在字段的规定范围内</li></ul></li></ul><h3 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h3><ul><li><p>update 表名 set 字段1&#x3D;值1,字段2&#x3D;值2,…..[where 一条件]</p></li><li><p><em><strong>注意</strong></em>：修改语句的条件可以有，也可以没有，如果没有条件，则会修改整张表的数据。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update employee set name =&#x27;wzhvv&#x27;,gender=&#x27;男&#x27; where id=1;</span><br></pre></td></tr></table></figure></li></ul><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><ul><li>delete from 表名 [where 条件]</li><li><em><strong>注意</strong></em>：delete语句的条件可以有，也可以没有，如果没有条件，则会删除整张表的所有数据</li><li>delete语句不能删除某一个字段的值(可以使用update)</li></ul><h2 id="DQL"><a href="#DQL" class="headerlink" title="DQL"></a>DQL</h2><h3 id="基本查询"><a href="#基本查询" class="headerlink" title="基本查询"></a>基本查询</h3><ul><li><p>查询多个字段</p><p>—select 字段1，字段2…from 表名;</p><p>—select * from 表名;</p></li><li><p>设置别名</p></li></ul><p>​       —select 字段1[as 别名1]，字段2[as 别名2]…from 表名;</p><ul><li><p>去除重复记录</p><p>—select distinct 字段列表 from 表名;</p></li><li><p>条件查询</p></li></ul><p>​        —select 字段列表 from 表名 where 条件列表;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;&gt;  或  !=     //不等于</span><br><span class="line">between and    //在某个范围之内（含最小，最大值）</span><br><span class="line">in(...)        //在in之后的列表中的值，多选一，满足其一即可</span><br><span class="line">例：select name from emp where id in(id=1,id=2);</span><br><span class="line">like &#x27;占位符&#x27;     //模糊匹配（&#x27;-&#x27;匹配单个字符，&#x27;%&#x27;匹配任意个字符）</span><br><span class="line">isnull         //是null</span><br></pre></td></tr></table></figure><ul><li>聚合函数</li></ul><p>​        —select 聚合函数（字段列表）from 表名;      &#x2F;&#x2F;null值不参与所有聚合函数运算</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">count      <span class="comment">//统计数量</span></span><br><span class="line">avg        <span class="comment">//平均值</span></span><br><span class="line">....</span><br><span class="line">select <span class="title function_">avg</span><span class="params">(e.salary)</span> from emp.e,dept d where e.dept_id=d.id and d.name=<span class="string">&#x27;研发部&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li>分组查询</li></ul><p>​        —select 字段列表 from 表名 [where 条件] group by 分组字段名 [having 分组后过滤条件];</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">where和having区别</span><br><span class="line">    执行时机不同：where是分组之前进行过滤，不满足where条件，不参与分组，而having是分组之后对结果进行过滤。</span><br><span class="line">    判断条件不同：where不能对聚合函数进行判断，而having可以。</span><br><span class="line">    注意：</span><br><span class="line">       执行顺序：where&gt;聚合函数&gt;having</span><br><span class="line">       分组之后：查询的字段一般为聚合函数和分组字段，查询其他字段无意义。</span><br><span class="line">    select workaddress,count(*) from emp where age&lt;=45 group by workaddress having count(*)&gt;=3;</span><br><span class="line">    注意：使用聚合函数时，也使用了其他数据，其他数据要放在group by后面</span><br></pre></td></tr></table></figure><ul><li>排序查询</li></ul><p>​        —select 字段列表 from 表名 order by 字段1 排序方式1，字段2 排序方式2;</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">asc    <span class="comment">//升序（默认值）</span></span><br><span class="line">desc   <span class="comment">//降序</span></span><br><span class="line">    注意：</span><br><span class="line">        如果多字段排序，当第一个字段值相同时，才会根据第二个字段进行排序。</span><br><span class="line">        select name,age from emp where age &lt;=<span class="number">35</span> order by age asc ,entrydate desc;</span><br></pre></td></tr></table></figure><ul><li>分页查询</li></ul><p>​       —select 字段列表 from 表名 limit 起始索引，查询记录数;</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">起始索引从<span class="number">0</span>开始，起始索引=（查询页码-<span class="number">1</span>）*每页显示记录数。</span><br><span class="line">    select * from emp where gender=<span class="string">&#x27;男&#x27;</span> and between <span class="number">20</span> and <span class="number">40</span> order by age,entrydate desc limit <span class="number">5</span>;</span><br></pre></td></tr></table></figure><h2 id="DCL"><a href="#DCL" class="headerlink" title="DCL"></a>DCL</h2><h3 id="管理用户"><a href="#管理用户" class="headerlink" title="管理用户"></a>管理用户</h3><ul><li>查询用户</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use mysql;</span><br><span class="line">select * from user;</span><br></pre></td></tr></table></figure><ul><li>创建用户</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create user &#x27;用户名&#x27; @ &#x27;主机名&#x27; identified by &#x27;密码&#x27;;   //主机名可以用%通配-&gt;任意主机都可访问</span><br></pre></td></tr></table></figure><ul><li>修改用户密码</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter user &#x27;用户名&#x27; @ &#x27;主机名&#x27; identified with mysql_native_password by &#x27;新密码&#x27;;</span><br></pre></td></tr></table></figure><ul><li>删除用户</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop user &#x27;用户名&#x27; @ &#x27;主机名&#x27;;</span><br></pre></td></tr></table></figure><h3 id="查询权限"><a href="#查询权限" class="headerlink" title="查询权限"></a>查询权限</h3><ul><li><p>权限表</p><p><img src="https://raw.githubusercontent.com/wzhvv/image/main/image/202307081715688.png" alt="权限表"></p></li><li><p>查询权限</p></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show grants for &#x27;用户名&#x27; @ &#x27;主机名&#x27;;</span><br></pre></td></tr></table></figure><ul><li>授予权限</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grant 权限列表 on 数据库名.表名 to &#x27;用户名&#x27; @ &#x27;主机名&#x27;;</span><br></pre></td></tr></table></figure><ul><li>撤销权限</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">revoke 权限列表 on 数据库名.表名 from &#x27;用户名&#x27; @ &#x27;主机名&#x27;;</span><br></pre></td></tr></table></figure><ul><li>注意：多个权限之间，使用逗号隔开</li><li>授权时，数据库名和表名可以使用*进行通配，代表所有。</li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select 函数(参数)</span><br></pre></td></tr></table></figure><h3 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h3><ul><li><p>concat(s1,s2…sn)                             &#x2F;&#x2F;字符串拼接，s1,s2…sn拼接成一个字符串</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select concat(&#x27;hello&#x27;,&#x27;mysql&#x27;);    //hellomysql</span><br></pre></td></tr></table></figure></li><li><p>lower(str)                                          &#x2F;&#x2F;将字符串str全部转为小写</p></li><li><p>upper(str)                                         &#x2F;&#x2F;将字符串str全部转为大写</p></li><li><p>lpad(str,n,pad)                                 &#x2F;&#x2F;左填充，用字符串pad对str的左边进行填充，达到n个字符串长度</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select lpad(&#x27;01&#x27;,5,&#x27;-&#x27;);      //---01</span><br><span class="line">update emp set workno=lapd(workno,5,&#x27;0&#x27;);</span><br></pre></td></tr></table></figure></li><li><p>rpad(str,n,pad)                                &#x2F;&#x2F;右填充，用字符串pad对str的右边进行填充，达到n个字符串长度</p></li><li><p>trim(str)                                            &#x2F;&#x2F;去掉字符串头部和尾部的空格</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select trim(&#x27;  hello  mysqkl  &#x27;);       //hello mysql</span><br></pre></td></tr></table></figure></li><li><p>substring(str,start,len)                   &#x2F;&#x2F;返回从字符串str从start位置起的len个长度的字符串，索引从1开始</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select substring(&#x27;hello mysql&#x27;,1,7);     //hello m</span><br></pre></td></tr></table></figure></li></ul><h3 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h3><ul><li><p>ceil(x)                         &#x2F;&#x2F;向上取整</p></li><li><p>floor(x)                       &#x2F;&#x2F;向下取整</p></li><li><p>mod(x,y)                    &#x2F;&#x2F;返回x&#x2F;y的模，即x%y的值</p></li><li><p>rand()                         &#x2F;&#x2F;返回0-1的随机数</p></li><li><p>round(x,y)                  &#x2F;&#x2F;求参数x的四舍五入的值，保留y位小数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select lpad(round(rand()*1000000,0),6,&#x27;0&#x27;);</span><br></pre></td></tr></table></figure></li></ul><h3 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h3><ul><li><p>curdate()                                                                       &#x2F;&#x2F;返回当前日期</p></li><li><p>curtime()                                                                    &#x2F;&#x2F;返回当前时间</p></li><li><p>now()                                                                            &#x2F;&#x2F;返回当前日期和时间</p></li><li><p>YEAR(date)                                                                  &#x2F;&#x2F;获取指定date的年份</p></li><li><p>MONTH(date)                                                             &#x2F;&#x2F;获取指定date的月份</p></li><li><p>DAY(date)                                                                    &#x2F;&#x2F;获取指定date的日期</p></li><li><p>date_add(date,INTERVAL expr type)                      &#x2F;&#x2F;返回一个日期&#x2F;时间值加上一个时间间隔expr和type类型后的时间值</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select date_add(now(),INTERVAL 70 DAY);</span><br></pre></td></tr></table></figure></li><li><p>datediff(date1,date2)                                               &#x2F;&#x2F;返回起始时间date1 和date2之间的天数，结果为date1-date2；</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select datediff(&#x27;2021-09-01&#x27;,&#x27;2018-09-01&#x27;);</span><br><span class="line">select name,datediff(curdate(),entrydate) as &#x27;entrydays&#x27; from emp order by entrydays desc;</span><br></pre></td></tr></table></figure></li></ul><h3 id="流程函数"><a href="#流程函数" class="headerlink" title="流程函数"></a>流程函数</h3><ul><li>if(value,t,f)                                                                                            &#x2F;&#x2F;如果value为true，返回t，否则返回f</li><li>ifnull(value1,value2)                                                                           &#x2F;&#x2F;如果value1不为null，返回value1，否则返回value2</li><li>case when [val1] then [res1]…else[default] end                           &#x2F;&#x2F;如果val为true，返回res1，…否则返回default默认值</li><li>case [expr] when[val1] then [res1]…else [default] end               &#x2F;&#x2F;如果expr的值等于val1，返回res1， …否则返回default默认值</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select</span><br><span class="line">    name,</span><br><span class="line">    (case workaddress when &#x27;北京&#x27; then &#x27;一线城市&#x27; when &#x27;上海&#x27; then &#x27;一线城市&#x27; else &#x27;二线城市&#x27; end) as &#x27;工作地址&#x27;</span><br><span class="line">from emp;</span><br></pre></td></tr></table></figure><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ul><li>约束是作用于表中字段上的规则，用于限制存储在表中的数据。</li></ul><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><ul><li>保证数据库中数据的正确，有效性和完整性。</li></ul><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">非空约束 --- 限制该字段的数据不能为null --- not null</span><br><span class="line">唯一约束 --- 保证该字段的所有数据都是唯一，不重复的 --- unique</span><br><span class="line">主键约束 --- 主键是一行数据的唯一标识，要求非空且唯一 --- primary key</span><br><span class="line">默认约束 --- 保存数据时，如果未指定该字段的值，则采用默认值 --- default</span><br><span class="line">检查约束 --- 保证字段值满足某一个条件 --- check</span><br><span class="line">外键约束 --- 用来让两张表的数据之间建立连接，保证数据的一致性和完整性 --- foreign key</span><br><span class="line">注意：约束是作用于表中字段上的，可以在创建表/修改表的时候添加约束。</span><br></pre></td></tr></table></figure><h3 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h3><ul><li>添加外键</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table 表名&#123;</span><br><span class="line">字段名 数据类型,</span><br><span class="line">....</span><br><span class="line">[constraint(约束)] [外键名称] foreign key (外键字段名) references(引用) 主表(主表列名)</span><br><span class="line">&#125;;     //创建表时添加</span><br><span class="line">alter table 表名 add constraint 外键名称 foreign key (外键字段名) references 主表(主表列名);   //表结构创好时添加</span><br><span class="line">例：alter table emp add constraint fk_emp_dept_id foreign key (dept_id) references dept(id);</span><br></pre></td></tr></table></figure><ul><li>删除外键</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter table 表名 drop foreign key 外键名称;</span><br></pre></td></tr></table></figure><ul><li>删除&#x2F;更新行为</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">not action --- 当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除/更新。(同restrich)</span><br><span class="line">restrich --- 当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除/更新。(同not action)</span><br><span class="line">cascade --- 当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有，则也删除/更新外键在子表中的记录。</span><br><span class="line">set null --- 当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则设置子表中该外键值为null(这就要求该外键允许取null)</span><br><span class="line">set default --- 父表有变更时，子表将外键列设置成一个默认的值(lnnodb不支持)</span><br><span class="line">alter table 表名 add constraint 外键名称 foreign key (外键字段) references 主表名(主表字段名) on update cascade(可变) on delete cascade(可变);</span><br></pre></td></tr></table></figure><h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><h3 id="多表关系"><a href="#多表关系" class="headerlink" title="多表关系"></a>多表关系</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">一对一 --- 在任意一方加入外键，关联另外一方的主键，并且设置外键为唯一的</span><br><span class="line">一对多 --- 在多的一方建立外键，指向一的一方的主键</span><br><span class="line">多对多 --- 建立第三张中间表，中间表至少包含两个外键，分别关联两方外键</span><br></pre></td></tr></table></figure><h3 id="多表查询-1"><a href="#多表查询-1" class="headerlink" title="多表查询"></a>多表查询</h3><ul><li>内连接</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">隐式内连接：select 字段列表 from 表1,表2 where 条件...;</span><br><span class="line">显式内链接：select 字段列表 from 表1 [inner](可删) join 表2 on 连接条件...;</span><br><span class="line">隐式内连接 语法更简单，显示内连接 效率更高，两个在查询结果上来说是相同的</span><br><span class="line">例：select e.name,e.age,e.job,d,name from emp e inner join dept d on e.dept_id=d.id where e.age&lt;30;</span><br></pre></td></tr></table></figure><ul><li>外连接</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">左外连接：select 字段列表 from 表1 left [outer](可删) join 表2 on 条件...;</span><br><span class="line">右外连接：select 字段列表 from 表1 right [outer](可删) join 表2 on 条件...;</span><br></pre></td></tr></table></figure><ul><li>自连接</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select 字段列表 from 表A 别名A join 表A 别名B on 条件...;</span><br><span class="line">自连接查询，可以是内连接查询，也可以是外连接查询。</span><br><span class="line">注意：必须使用表别名</span><br></pre></td></tr></table></figure><ul><li>联合查询</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select 字段列表 from 表A ...</span><br><span class="line">union [all]</span><br><span class="line">select 字段列表 from 表B ...;</span><br><span class="line">对于联合查询的多张表的列数必须保持一致，字段类型也必须保持一致</span><br><span class="line">union all会将全部的数据直接合并到一起，union会对合并后的数据去重</span><br></pre></td></tr></table></figure><ul><li><p>子查询&#x2F;嵌套查询</p><p>根据子查询位置，分为：where之后，from之后，select之后</p><p>根据子查询结果不同，分为：</p></li></ul><ol><li>列子查询</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">子查询返回的结果是一列(可以是多行)，这种子查询称为列子查询。</span><br><span class="line">常用操作符：in , not in , any , some , all</span><br><span class="line">in --- 在指定的集合范围内，多选一</span><br><span class="line">not in --- 不在指定的集合范围内</span><br><span class="line">all --- 子查询返回列表中，在任意一个满足即可</span><br><span class="line">some --- 与any等同，使用some的地方都可以用any</span><br><span class="line">all --- 子查询返回列表的所有值都必须满足</span><br></pre></td></tr></table></figure><ol start="2"><li>行子查询</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">子查询返回的结果是一行(可以是多列)，这种子查询称为行子查询。</span><br><span class="line">常用的操作符：= , &lt;&gt; , in , not in</span><br><span class="line">select * from emp where (salary,managerid)=(select salary,managerid from emp where name=&#x27;张无忌&#x27;);</span><br></pre></td></tr></table></figure><ol start="3"><li>表字查询</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">子查询返回结果是多行多列，这种子查询称为表子查询</span><br><span class="line">常用的操作符：in</span><br><span class="line">select * from emp where (salary,job) in(select salary,job from emp where name=&#x27;鹿杖客&#x27; or name=&#x27;宋远桥&#x27;);</span><br><span class="line">select e.*,d.* from (select * from emp where entrydate&gt;&#x27;2006-01-01&#x27;) e left outer join dept d on e.dept_id=d.id;</span><br></pre></td></tr></table></figure><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><h3 id="事务操作"><a href="#事务操作" class="headerlink" title="事务操作"></a>事务操作</h3><ul><li>查看&#x2F;设置事务提交方式</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select @@autocommit;</span><br><span class="line">set @@sutocommit=0;</span><br></pre></td></tr></table></figure><ul><li>提交事务</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">commit;</span><br></pre></td></tr></table></figure><ul><li>回滚事务</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rollback;</span><br></pre></td></tr></table></figure><ul><li>开启事务</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">start transaction 或 begin</span><br></pre></td></tr></table></figure><p>提交事务和回滚事务同上</p><h3 id="事务四大特性"><a href="#事务四大特性" class="headerlink" title="事务四大特性"></a>事务四大特性</h3><ul><li>原子性(Atomicity):事务是不可分割的最小操作单元，要么全部成功，要么全部失败。</li><li>一致性(Consistency):事务完成时，必须使所有的数据都保持一致状态。</li><li>隔离性(Isolation):数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行。</li><li>持久性(Durability):事务一旦提交或回滚，它对数据库中的数据的改变就是永久的。</li></ul><h3 id="并发事务问题"><a href="#并发事务问题" class="headerlink" title="并发事务问题"></a>并发事务问题</h3><ul><li>脏读：一个事务读到另外一个事务还没有提交的数据。</li><li>不可重复读：一个事务先后读取同一条记录，但两次读取的数据不同，称之为不可重复读。</li><li>幻读：一个事务按照条件查询数据时，没有对应的数据行，但是在插入数据时，又发现这行数据已经存在，好像出现了幻影。</li></ul><h3 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h3><p><img src="https://raw.githubusercontent.com/wzhvv/image/main/image/202307081715064.png" alt="事务隔离等级"></p><h2 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h2><h3 id="存储引擎简介"><a href="#存储引擎简介" class="headerlink" title="存储引擎简介"></a>存储引擎简介</h3><ul><li>在创表时，指定存储引擎</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table 表名&#123;</span><br><span class="line">....</span><br><span class="line">&#125;engine=innodb;</span><br></pre></td></tr></table></figure><ul><li>查看当前数据库支持的存储引擎</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show engines;</span><br></pre></td></tr></table></figure><h3 id="存储引擎特点"><a href="#存储引擎特点" class="headerlink" title="存储引擎特点"></a>存储引擎特点</h3><ul><li>InnoDB</li></ul><p><img src="https://raw.githubusercontent.com/wzhvv/image/main/image/202307081715066.png"></p><p><img src="https://raw.githubusercontent.com/wzhvv/image/main/image/202307081715573.png"></p><ul><li>MyISAM</li></ul><p><img src="https://raw.githubusercontent.com/wzhvv/image/main/image/202307081715778.png"></p><ul><li>Memory</li></ul><p><img src="https://raw.githubusercontent.com/wzhvv/image/main/image/202307081715999.png"></p><ul><li>比较</li></ul><p><img src="https://raw.githubusercontent.com/wzhvv/image/main/image/202307081715438.png"></p><h3 id="存储引擎选择"><a href="#存储引擎选择" class="headerlink" title="存储引擎选择"></a>存储引擎选择</h3><p><img src="https://raw.githubusercontent.com/wzhvv/image/main/image/202307081715604.png"></p><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><h3 id="概述："><a href="#概述：" class="headerlink" title="概述："></a>概述：</h3><p>索引是帮助mysql高效获取数据的数据结构(有序)。在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用(指向)数据，这样就可以在这些数据结构上实现高级查找算法，这种数据结构就是索引。</p><ul><li><p>优势：提高数据检索的效率，降低数据库的IO成本。</p><p>​            通过索引列对数据进行排序，降低数据排序的成本，降低CPU的消耗。</p></li><li><p>劣势：索引列也是要占用空间的。</p></li></ul><p>​                   索引大大提高了查询效率，同时却也降低更新表的速度，如对表进行INSERT，UPDATE，DELETE时，效率降低。</p><h3 id="索引结构"><a href="#索引结构" class="headerlink" title="索引结构"></a>索引结构</h3><p><img src="https://raw.githubusercontent.com/wzhvv/image/main/image/202307081715623.png"></p><p><img src="https://raw.githubusercontent.com/wzhvv/image/main/image/202307081716463.png"></p><p><img src="https://raw.githubusercontent.com/wzhvv/image/main/image/202307081716682.png"></p><h3 id="Btree索引"><a href="#Btree索引" class="headerlink" title="Btree索引"></a>Btree索引</h3><p><img src="https://raw.githubusercontent.com/wzhvv/image/main/image/202307081716643.png" alt="Btree"></p><h3 id="B-tree索引"><a href="#B-tree索引" class="headerlink" title="B+tree索引"></a>B+tree索引</h3><p><img src="https://raw.githubusercontent.com/wzhvv/image/main/image/202307081716370.png" alt="B+tree"></p><p><img src="https://raw.githubusercontent.com/wzhvv/image/main/image/202307081716343.png"></p><p><img src="https://raw.githubusercontent.com/wzhvv/image/main/image/202307081716434.png"></p><h3 id="Hash索引"><a href="#Hash索引" class="headerlink" title="Hash索引"></a>Hash索引</h3><p><img src="https://raw.githubusercontent.com/wzhvv/image/main/image/202307081716389.png" alt="Hash"></p><p><img src="https://raw.githubusercontent.com/wzhvv/image/main/image/202307081716489.png"></p><h3 id="B-tree索引优势"><a href="#B-tree索引优势" class="headerlink" title="B+tree索引优势"></a>B+tree索引优势</h3><p><img src="https://raw.githubusercontent.com/wzhvv/image/main/image/202307081717258.png"></p><h3 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h3><p><img src="https://raw.githubusercontent.com/wzhvv/image/main/image/202307081717444.png"></p><p><img src="https://raw.githubusercontent.com/wzhvv/image/main/image/202307081717371.png"></p><p><img src="https://raw.githubusercontent.com/wzhvv/image/main/image/202307081717449.png"></p><p><img src="https://raw.githubusercontent.com/wzhvv/image/main/image/202307081717645.png"></p><p><img src="https://raw.githubusercontent.com/wzhvv/image/main/image/202307081717707.png"></p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><ul><li>创建索引</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create [unique|fulltext] index index_name on table_name(index_col_name...)</span><br><span class="line">例：create index ind_user_name on tb_user(name)</span><br><span class="line">   create unique index tb_user_phone on tb_user(phone)</span><br></pre></td></tr></table></figure><ul><li>查看索引</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show index from table_name;</span><br></pre></td></tr></table></figure><ul><li>删除索引</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop index index_name on table_name;</span><br><span class="line">例：drop index tb_user_email on tb_user;</span><br></pre></td></tr></table></figure><h3 id="SQL性能分析"><a href="#SQL性能分析" class="headerlink" title="SQL性能分析"></a>SQL性能分析</h3><h4 id="SQL执行频率"><a href="#SQL执行频率" class="headerlink" title="SQL执行频率"></a>SQL执行频率</h4><p>MySQL客户端连接成功后，通过show [session | global] status命令可以提供服务器状态信息。通过如下指令，可以查看当前数据库的insert,update,delete,select的访问频次</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show global status like &#x27;COM_______&#x27;; //(7个下划线)</span><br></pre></td></tr></table></figure><h4 id="慢查询日志"><a href="#慢查询日志" class="headerlink" title="慢查询日志"></a>慢查询日志</h4><ol><li>查看慢查询日志开关开启情况</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show variables like &#x27;show_query_log&#x27;;</span><br></pre></td></tr></table></figure><ol start="2"><li><img src="https://raw.githubusercontent.com/wzhvv/image/main/image/202307081717606.png"></li></ol><h4 id="profile"><a href="#profile" class="headerlink" title="profile"></a>profile</h4><p>show profiles能够在做SQL优化时帮助我们了解时间都耗费到哪里去了。<strong>通过have_profiling参数，能够看到当前MySQL是否支持profile操作</strong>：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select @@have_profiling;  select @@profiling;(查询是否打开)</span><br></pre></td></tr></table></figure><p>默认profling是关闭的，可以通过set语句在session&#x2F;global级别开启profling:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set profiling=1;</span><br></pre></td></tr></table></figure><p>执行一系列的业务SQL的操作，然后通过如下指令查看指令的执行耗时：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#查看每一条SQL的耗时基本情况</span><br><span class="line">show profiles;</span><br><span class="line"> Query_ID | Duration   | Query                                     |</span><br><span class="line">+----------+------------+-------------------------------------------+</span><br><span class="line">|        1 | 0.00043350 | select @@profiling                        |</span><br><span class="line">|        2 | 0.00080550 | select * from tb_user where id=1          |</span><br><span class="line">|        3 | 0.00092550 | select * from tb_user where name=&#x27;白起&#x27; </span><br><span class="line">#查看指定query_id的SQL语句各个阶段的耗时情况</span><br><span class="line">show profile for query query_id;</span><br><span class="line">例：show profile for query 3;</span><br><span class="line">#查看指定query_id的SQL语句CPU的使用情况</span><br><span class="line">show profile cpu for query query_id;</span><br></pre></td></tr></table></figure><h4 id="explain"><a href="#explain" class="headerlink" title="explain"></a>explain</h4><p><strong>explain</strong>或者<strong>desc</strong>命令获取mysql如何执行select语句的信息，包括在select语句执行过程中如何连接和连接的顺序</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#直接在select语句之前加上关键字explain/desc</span><br><span class="line">explain select 字段列表 from 表名 where 条件;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/wzhvv/image/main/image/202307151515003.png" alt="image-20230715151514766"></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">typr：</span><br><span class="line">NULL：查询时不访问任何表。如：select <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">const：主键或唯一索引</span><br><span class="line">ref：非唯一索引</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/wzhvv/image/main/image/202307151515124.png" alt="image-20230715151539986"></p><h4 id="使用规则"><a href="#使用规则" class="headerlink" title="使用规则"></a>使用规则</h4><ul><li>验证索引效率</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在未建立索引之前，执行如下SQL语句，查看SQL的耗时</span><br><span class="line">select * from tb_sku where sn=&#x27;10000003145001&#x27;;</span><br><span class="line">针对字段创建索引</span><br><span class="line">create index idx_sku_sn on tb_sku(sn);</span><br><span class="line">然后再次执行相同的SQL语句，再次查看SQL的耗时</span><br><span class="line">select * from tb_sku where sn=&#x27;10000003145001&#x27;;</span><br></pre></td></tr></table></figure><ul><li>最左前缀法则</li></ul><p>如果索引了多列(联合索引)，要遵循最左前缀法则。最左前缀法则指的是查询从索引的最左列开始，并且不跳过索引中的列。</p><p><strong>如果跳跃某一列，索引将部分失效(后面的字段索引失效)</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">explain select * from tb_user where profession=&#x27;软件工程&#x27; and age=31 and status=&#x27;0&#x27;; //key_len=54</span><br><span class="line">explain select * from tb_user where profession=&#x27;软件工程&#x27; and age=31;  //key_len=49</span><br><span class="line">explain select * from tb_user where age=31 and status=&#x27;0&#x27;; //type=all,索引失效</span><br><span class="line">explain select * from tb_user where profession=&#x27;软件工程&#x27; and status=&#x27;0&#x27;; //key_len=47,status失效</span><br><span class="line">explain select * from tb_user where age=31 and status=&#x27;0&#x27; and profession=&#x27;软件工程&#x27;;//key_len=54</span><br><span class="line">索引中最左边元素必须存在，与所放位置无关</span><br></pre></td></tr></table></figure><ul><li>范围查询</li></ul><p>联合索引中，出现范围查询(&gt;,&lt;)，<strong>范围查询右侧的列索引失效</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">explain select * from tb_user where profession=&#x27;软件工程&#x27; and age&gt;30 and status=&#x27;0&#x27;;//key_len=49</span><br><span class="line">explain select * from tb_user where profession=&#x27;软件工程&#x27; and age&gt;=30 and status=&#x27;0&#x27;;//key_len=54</span><br></pre></td></tr></table></figure><ul><li>索引列运算</li></ul><p>不要在索引列上进行运算操作，索引将失效</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">explain select * from tb_user where substring(phone,10,2)=&#x27;15&#x27;;</span><br></pre></td></tr></table></figure><ul><li>字符串不加引号</li></ul><p>字符串类型字段使用时，不加引号，索引将失效</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">explain select * from tb_user where profession=&#x27;软件工程&#x27; and age=31 and status=0;</span><br><span class="line">explain select * from tb_user where phone=17799990015;(字符串不加引号，隐式类型转换)</span><br></pre></td></tr></table></figure><ul><li>模糊查询</li></ul><p>如果仅仅是尾部模糊匹配，索引不会失效。如果是头部模糊匹配，索引失效</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">explain select * from tb_user where profession like &#x27;软件%&#x27;;</span><br><span class="line">explain select * from tb_user where profession like &#x27;%工程&#x27;;</span><br><span class="line">explain select * from tb_user where profession like &#x27;%工%&#x27;;</span><br></pre></td></tr></table></figure><ul><li>or连接条件</li></ul><p>用or分隔开的条件，如果or前的条件中的列有索引，而后面的列中没有索引，那么涉及的索引都不会被用到。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">explain select * from tb_user where id=10 or age=23;</span><br><span class="line">explain select * from tb_user where phone=&#x27;17799990015&#x27; or age=23;</span><br></pre></td></tr></table></figure><p>由于age没有索引，所以即使id，phone有索引，索引也会失效。所以需要针对于age也要建立索引。</p><ul><li>数据分布影响</li></ul><p>如果MYSQL评估使用索引比全表更慢，则不使用索引。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from tb_user where phone&gt;=&#x27;17799990005&#x27;;</span><br><span class="line">select * from tb_user where phone&gt;=&#x27;17799990015&#x27;;</span><br></pre></td></tr></table></figure><ul><li>SQL提示</li></ul><p>SQL提示，是优化数据库的一个重要手段，简单来说，就是在SQL语句中加入一些人为的提示来达到优化操作的目的。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use index:(建议使用，可能不遵循)</span><br><span class="line">explain select * from tb_user use index(idx_user_pro) where profession=&#x27;软件工程&#x27;;</span><br><span class="line">ignore index:(不用)</span><br><span class="line">explain select * from tb_user ignore index(idx_user_pro) where profession=&#x27;软件工程&#x27;;</span><br><span class="line">force index:(强制)</span><br><span class="line">explain select * from tb_user force index(idx_user_pro) where profession=&#x27;软件工程&#x27;;</span><br></pre></td></tr></table></figure><ul><li>覆盖索引</li></ul><p>尽量使用覆盖索引(查询使用了索引，并且需要返回的列，在该索引中已经全部找到)，减少select *</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">explain select id,profession from tb_user where profession=&quot;软件工程&quot; and age=31 and status=&#x27;0&#x27;;</span><br><span class="line">explain select id,profession,age,status from tb_user where profession=&quot;软件工程&quot; and age=31 and status=&#x27;0&#x27;;</span><br><span class="line"></span><br><span class="line">explain select id,profession,age,status,name from tb_user where profession=&quot;软件工程&quot; and age=31 and status=&#x27;0&#x27;;</span><br><span class="line">explain select * from tb_user where profession=&quot;软件工程&quot; and age=31 and status=&#x27;0&#x27;;</span><br></pre></td></tr></table></figure><p><strong>知识小贴士：</strong></p><p><strong>using index condition：查找使用了索引，但是需要回表查询数据</strong></p><p>using where;using index：查找使用了索引，但是需要的数据都在索引列中能找到，所以不需要回表查询数据</p><p><img src="https://raw.githubusercontent.com/wzhvv/image/main/image/202307081717853.png" alt="Snipaste_2023-04-28_10-39-28"></p><ul><li>前缀索引</li></ul><p>当字段类型为字符串(varchar，text等)时，有时候需要索引很长的字符串，这会让索引变得很大，查询时，浪费大量的磁盘IO，影响查询效率。此时可以只将字符串的一部分前缀，建立索引，这样可以大大节约索引空间，从而提高索引效率。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">语法：</span><br><span class="line">create index idx_xxxx on table_name(column(n));</span><br><span class="line">前缀长度：</span><br><span class="line">可以根据索引的选择性来决定，而选择性是指不重复的索引值(基数)和数据表的记录总数的比值，索引选择性越高则查询效率越高，唯一索引的选择性是1，这是最好的索引选择性，性能也是最好的。</span><br><span class="line">select count(distinct email)/count(*) from tb_user;   1</span><br><span class="line">select count(distinct substring(email,1,5))/count(*) from tb_user;  0.9513，变为4时为0.9123</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/wzhvv/image/main/image/202307081718102.png" alt="Snipaste_2023-05-02_14-16-52"></p><h2 id="SQL优化"><a href="#SQL优化" class="headerlink" title="SQL优化"></a>SQL优化</h2><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><h4 id="insert优化"><a href="#insert优化" class="headerlink" title="insert优化"></a>insert优化</h4><ol><li>批量插入</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into tb_user values(1,&#x27;TOM&#x27;),(2,&#x27;CAT&#x27;),...;</span><br></pre></td></tr></table></figure><ol start="2"><li>手动提交事务</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">start transaction;</span><br><span class="line">insert into tb_user values(1,&#x27;TOM&#x27;),(2,&#x27;CAT&#x27;),...;</span><br><span class="line">...</span><br><span class="line">commit;</span><br></pre></td></tr></table></figure><ol start="3"><li>主键顺序插入</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">主键乱序插入：8 1 9 21 88 2 4 15 89 5 7 3</span><br><span class="line">主键顺序插入：1 2 3 4 5 7 8 9 15 21 88 89</span><br></pre></td></tr></table></figure><h4 id="大批量插入数据"><a href="#大批量插入数据" class="headerlink" title="大批量插入数据"></a>大批量插入数据</h4><ul><li>如果一次性需要插入大批量数据，使用insert语句插入性能较低，此时可以使用MySQL数据库提供的load指令进行插入。操作如下：</li></ul><p><img src="https://raw.githubusercontent.com/wzhvv/image/main/image/202307161630957.png" alt="Snipaste_2023-07-16_16-15-09"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#客户端连接服务端时，加上参数 --local-infile</span><br><span class="line">mysql--local-infile -u root -p</span><br><span class="line">#设置全局参数local_infile为1，开启从本地加载文件导入数据的开关</span><br><span class="line">set global local_infile=1;</span><br><span class="line">#执行local指令将准备好的数据，加载到表结构中</span><br><span class="line">load data local infile &#x27;/root/sql1.log&#x27; into table &#x27;tb_user&#x27; fields terminated by &#x27;,&#x27; lines terminated by &#x27;\n&#x27;;</span><br></pre></td></tr></table></figure><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><ul><li>介绍</li></ul><p>视图(view)是一种虚拟存在的表。视图中的数据并不在数据库中实际存在，行和列数据来自定义视图的查询中使用的表，并且是在使用视图时动态生成的。</p><p>通俗的讲，视图只保存了查询的SQL逻辑，不保存查询结果。所以我们在创建视图的时候，主要的工作就落在创建这条SQL查询语句上。</p><ul><li>创建</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create [or replace](可省略) view 视图名称[(列名列表)] as select语句 [with[cascaded | local] check option]</span><br></pre></td></tr></table></figure><ul><li>查询</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">查看创建视图语句：show create view 视图名称;</span><br><span class="line">查看视图数据：select * from 视图名称...;</span><br></pre></td></tr></table></figure><ul><li>修改</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">方式一：create [or replace](不可省略) view 视图名称[(列名列表)] as select语句 [with[cascaded | local] check option]</span><br><span class="line">方式二：alter view 视图名称[(列名列表)] as select 语句 [with[cascaded | local] check option]</span><br></pre></td></tr></table></figure><ul><li>删除</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop view [if exists] 视图名称 [视图名称]...;</span><br></pre></td></tr></table></figure><ul><li>视图的检查选项</li></ul><p>当使用with check option子句创建视图时，MySQL会通过视图检查正在更改的每个行，例如插入，更新，删除，以使其符合视图的定义。MySQL允许基于另一个视图创建视图，它还会检查依赖视图中的规则以保持一致性。为了确定检查的范围，mysql提供了两个选项：</p><p>cascaded 和 local，默认值为cascaded。</p><p>CASCADED:</p><p><img src="https://raw.githubusercontent.com/wzhvv/image/main/image/202307081718108.png" alt="Snipaste_2023-05-03_16-03-56"></p><p><img src="https://raw.githubusercontent.com/wzhvv/image/main/image/202307081718728.png" alt="Snipaste_2023-05-03_16-10-56"></p><ul><li>视图的更新</li></ul><p>要使视图可更新，视图中的行与基础表中的行之间必须存在一对一的关系。如果视图包含以下任何一项，则该视图不可更新：</p><ol><li>聚合函数或窗口函数(sum(),min(),max(),count()等)</li><li>distinct</li><li>group by</li><li>having</li><li>union或者union all</li></ol><ul><li>作用</li></ul><ol><li>简单</li></ol><p>视图不仅可以简化用户对数据的理解，也可以简化他们的操作。那些被经常使用的查询可以被定义为视图，从而使得用户不必为以后的操作每次指定全部的条件</p><ol start="2"><li>安全</li></ol><p>数据库可以授权，但不能授权到数据库特定行和特定的列上。通过视图用户只能查询和修改他们所能见到的数据</p><ol start="3"><li>数据独立</li></ol><p>视图可帮助用户屏蔽真实表结构变化带来的影响</p><h2 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h2><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><ul><li>介绍</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">存储过程是事先经过编译并存储在数据库中的一段SQL语句的集合，调用存储过程可以简化应用开发人员的很多工作，减少数据在数据库和应用服务器之间的传输，对于提高数据处理的效率是有好处的。</span><br><span class="line">存储过程思想上很简单，就是数据库SQL语言层面的代码封装与重用。</span><br></pre></td></tr></table></figure><ul><li>特点</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">封装，复用</span><br><span class="line">可以接收参数，也可以返回数据</span><br><span class="line">减少网络交互，效率提升</span><br></pre></td></tr></table></figure><ul><li>创建</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">create procedure 存储过程名称([参数列表])</span><br><span class="line">begin</span><br><span class="line">     --SQL语句</span><br><span class="line">end;     </span><br></pre></td></tr></table></figure><ul><li>调用</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">call 名称([参数]);</span><br></pre></td></tr></table></figure><ul><li>查看</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">select * from information_schema.routines where routine_schema=&#x27;xxx&#x27;;--查询指定数据库的存储过程及状态信息</span><br><span class="line">show create procedure 存储过程名称;--查询某个存储过程的定义</span><br></pre></td></tr></table></figure><ul><li>删除</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">drop procedure [id exists] 存储过程名称;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：在命令行中，执行创建存储过程的SQL时，需要通过关键字delimiter指定SQL语句的结束符</p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><h4 id="系统变量"><a href="#系统变量" class="headerlink" title="系统变量"></a>系统变量</h4><p>系统变量是MYSQL服务器提供，不是用户定义的，属于服务器层面。分为全局变量(global)，会话变量(session)</p><ul><li>查看系统变量</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">show [session | global] variables;   --查看所有系统变量</span><br><span class="line">show [session | global] variables like&#x27;...&#x27;;  --可以通过like模糊匹配的方式查找变量</span><br><span class="line">show @@[session | global] 系统变量名;  --查看指定变量的值</span><br></pre></td></tr></table></figure><ul><li>设置系统变量</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">set [session | global] 系统变量名=值;</span><br><span class="line">set @@[session | global] 系统变量名=值;</span><br></pre></td></tr></table></figure><p>注意：</p><p>如果没有指定session&#x2F;global，默认是session，会话变量</p><p>mysql服务重新启动之后，所设置的全局参数会失效，要想不失效，可以在&#x2F;etc&#x2F;my.cnf中配置</p><h4 id="用户定义变量"><a href="#用户定义变量" class="headerlink" title="用户定义变量"></a>用户定义变量</h4><p>用户定义变量是用户根据需要自己定义的变量，用户变量不要提前声明，在用的时候**直接用”@变量名”**使用就可以。其作用域为当前连接</p><ul><li>赋值</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">set @var_name=expr[,@var_name=expr]...;</span><br><span class="line">set @var_name:=expr[,@var_name=expr]...;</span><br><span class="line">set @myname=&#x27;wzhvv&#x27;;</span><br><span class="line">set @myage:=10;</span><br><span class="line">set @mygender:=&#x27;男&#x27;,@myhobby:=&#x27;mysql&#x27;;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">select @var_name=expr[,@var_name=expr]...;</span><br><span class="line">select 字段名 into @var_name from 表名;</span><br><span class="line">select @mycocor:=&#x27;red&#x27;;</span><br><span class="line">select count(*) into @mycount from tb_user;</span><br></pre></td></tr></table></figure><ul><li>使用</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">select @var_name;</span><br><span class="line">select @myname,@myage,@mygender,@myhobby;</span><br></pre></td></tr></table></figure><p>注意：</p><p>用户定义的变量无需对其进行声明或初始化，只不过获取到的值为NULL</p><h4 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h4><p>局部变量是根据需要定义的在局部生效的变量，访问之前，需要declare声明。可用作存储过程内的局部变量和输入参数，局部变量的范围是在其声明的begin…end块</p><ul><li>声明</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">declare 变量名 变量类型 [default...];</span><br></pre></td></tr></table></figure><p>变量类型就是数据库字段类型：int，begint，char，varchar，date，time等</p><ul><li>赋值</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">set 变量名=值;</span><br><span class="line">set 变量名:=值;</span><br><span class="line">set 字段名 into 变量名 from 表名...;</span><br></pre></td></tr></table></figure><h3 id="流程结构"><a href="#流程结构" class="headerlink" title="流程结构"></a>流程结构</h3><h4 id="if判断"><a href="#if判断" class="headerlink" title="if判断"></a>if判断</h4><p>语法：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">if 条件1 then</span><br><span class="line">....</span><br><span class="line">elseif 条件2 then</span><br><span class="line">....</span><br><span class="line">else</span><br><span class="line">....</span><br><span class="line">end if;</span><br></pre></td></tr></table></figure><h4 id="参数-in-out-input"><a href="#参数-in-out-input" class="headerlink" title="参数(in,out,input)"></a>参数(in,out,input)</h4><table><thead><tr><th align="center">类型</th><th align="center">含义</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">in</td><td align="center">该类参数作为输入，也就是需要调用时传入值</td><td align="center">默认</td></tr><tr><td align="center">out</td><td align="center">该类参数作为输出，也就是该参数可以作为返回值</td><td align="center"></td></tr><tr><td align="center">inout</td><td align="center">既可以作为输入参数，也可以作为输出参数</td><td align="center"></td></tr></tbody></table><p>用法：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">create procedure 存储过程([in/out/inout 参数名 参数类型])</span><br><span class="line">begin</span><br><span class="line">   --SQL语句</span><br><span class="line">end;</span><br></pre></td></tr></table></figure><h4 id="case"><a href="#case" class="headerlink" title="case"></a>case</h4><p>语法一：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">case case_value</span><br><span class="line">      when when_value1 then statement_list1</span><br><span class="line">      [when when_value2 then statement_list2]...</span><br><span class="line">      [else statement_list]</span><br><span class="line">end case;     </span><br></pre></td></tr></table></figure><p>语法二：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">case</span><br><span class="line">    when search_condition1 then statement_list1</span><br><span class="line">    [when search_condition2 then statement_list2]...</span><br><span class="line">    [else statement_list]</span><br><span class="line">end case;</span><br></pre></td></tr></table></figure><h4 id="while"><a href="#while" class="headerlink" title="while"></a>while</h4><p>while循环是有条件的循环控制语句。满足条件后，再执行循环体中的SQL语句。具体语法为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#先判定条件，如果条件为true，则执行逻辑，否则，不执行逻辑</span><br><span class="line">while 条件 do</span><br><span class="line">     SQL逻辑...</span><br><span class="line">end while;   </span><br></pre></td></tr></table></figure><h4 id="repeat-相当于do…while"><a href="#repeat-相当于do…while" class="headerlink" title="repeat(相当于do…while)"></a>repeat(相当于do…while)</h4><p>repeat是有条件的循环控制语句，当满足条件的时候退出循环。具体语法为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#先执行一次逻辑，然后判定逻辑是否满足，如果满足，则退出。如果不满足，则继续下一次循环</span><br><span class="line">repeat </span><br><span class="line">     SQL逻辑...</span><br><span class="line">     until 条件</span><br><span class="line">end repeat;     </span><br></pre></td></tr></table></figure><h4 id="loop"><a href="#loop" class="headerlink" title="loop"></a>loop</h4><p>loop实现简单的循环，如果不在SQL逻辑中增加退出循环的条件，可以用其来实现简单的死循环。loop可以配合以下两个语句使用：</p><ul><li>leave：配合循环使用，退出循环</li><li>iterate：必须用在循环中，作用是跳过当前循环剩下的语句，直接进入下一次循环</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[begin_lable:] loop</span><br><span class="line">       SQL逻辑...</span><br><span class="line">end loop [end_lable];     </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">leave lable;   --退出指定标记的循环体</span><br><span class="line">iterate lable; --直接进入下一次循环</span><br></pre></td></tr></table></figure><h4 id="游标-cursor"><a href="#游标-cursor" class="headerlink" title="游标-cursor"></a>游标-cursor</h4><p>游标(cursor)是用来存储查询结果集的数据类型，在存储过程和函数中可以使用游标对结果集进行循环的处理。游标的使用包括游标的声明，open，fetch和close，其语法分别如下。</p><ul><li>声明游标</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">declare 游标名称 cursor for 查询语句;</span><br></pre></td></tr></table></figure><ul><li>打开游标</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">open 游标名称;</span><br></pre></td></tr></table></figure><ul><li>获取游标记录</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fetch 游标名称 into 变量[，变量];</span><br></pre></td></tr></table></figure><ul><li>关闭游标</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">close 游标名称;</span><br></pre></td></tr></table></figure><h4 id="条件处理程序-handler"><a href="#条件处理程序-handler" class="headerlink" title="条件处理程序(handler)"></a>条件处理程序(handler)</h4><p>条件处理程序(handle)可以用来定义在流程控制结构执行过程中遇到问题时相应的处理步骤。具体语法为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">declare handler_action handler for condition_value [,condition_value]...statement;</span><br><span class="line">handler_action</span><br><span class="line">        continue:继续执行当前程序</span><br><span class="line">        exit:终止执行当前程序</span><br><span class="line">condition_value</span><br><span class="line">        sqlstate sqlstate_value:状态码，如02000</span><br><span class="line">        sqlwarning:所有以01开头的sqlstate代码的简写</span><br><span class="line">        not found:所有以02开头的sqlstate代码的简写</span><br><span class="line">        sqlexeception:所有没有被sqlwarning或not found捕获的sqlstate代码的简写</span><br></pre></td></tr></table></figure><h2 id="存储函数"><a href="#存储函数" class="headerlink" title="存储函数"></a>存储函数</h2><p>存储函数是有返回值的存储过程，存储函数的参数只能是in类型的。具体语法如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create function 存储函数名称([参数列表])</span><br><span class="line">returns type [characteristic...]</span><br><span class="line">begin</span><br><span class="line">    --SQL语句</span><br><span class="line">    return ...;</span><br><span class="line">end;</span><br><span class="line"></span><br><span class="line">characteristic说明:</span><br><span class="line">-deterministic:相同的输入参数总是产生相同的结果</span><br><span class="line">-no sql:不包含sql语句</span><br><span class="line">-reads sql data:包含读取数据的语句，但不包含写入数据的语句</span><br></pre></td></tr></table></figure><h2 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h2><p>触发器是与表相关的数据库对象，指在insert&#x2F;update&#x2F;delete之前或之后，触发并执行触发器中定义的SQL语句集合。触发器的这种特性可以协助应用在数据库端确保数据的完整性，日志记录，数据校验等操作。</p><p>使用别名old和new来引用触发器中发生变化的记录内容，这与其他的数据库是相似的。现在触发器还只支持行级触发，不支持语句级触发。</p><table><thead><tr><th align="center">触发器类型</th><th align="center">new和old</th></tr></thead><tbody><tr><td align="center">insert型触发器</td><td align="center">new表示将要或者已经新增的数据</td></tr><tr><td align="center">update型触发器</td><td align="center">old表示修改之前的数据，new表示将要或已经修改后的数据</td></tr><tr><td align="center">delete型触发器</td><td align="center">old表示将要或者已经删除的数据</td></tr></tbody></table><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">创建：</span><br><span class="line">create trigger trigger_name</span><br><span class="line">before/after insert/update/delete</span><br><span class="line">on tbl_name for each row --行级触发器</span><br><span class="line">begin</span><br><span class="line">    trigger_stmt;</span><br><span class="line">end;</span><br><span class="line">查看</span><br><span class="line">show triggers;</span><br><span class="line">删除</span><br><span class="line">drop trigger [schema_name] trigger_name; --如果没有指定schema_name,默认为当前数据库</span><br></pre></td></tr></table></figure><h2 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h2><h3 id="概述：-1"><a href="#概述：-1" class="headerlink" title="概述："></a>概述：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">锁是计算机协调多个进程或线程并发访问某一资源的机制。在数据库中，除传统的计算资源(CPU，RAM，I/O)的争用以外，数据也是一种供许多用户共享的资源，如何保证数据并发访问的一致性，有效性是所有数据库必须解决的一个问题，锁冲突也是影响数据库并发访问性能的一个重要因素。从这个角度来说，锁对数据库而言显得尤其重要，也更加复杂。</span><br></pre></td></tr></table></figure><p>MySQL中的锁，按照锁的粒度分，分为以下三类：</p><ol><li>全局锁：锁定数据库中的所有表</li><li>表级锁：每次操作锁住整张表</li><li>行级锁：每次操作锁住对应的行数据</li></ol><h1 id="数据库随记"><a href="#数据库随记" class="headerlink" title="数据库随记"></a>数据库随记</h1><h2 id="MySQL查询语句的执行顺序"><a href="#MySQL查询语句的执行顺序" class="headerlink" title="MySQL查询语句的执行顺序"></a>MySQL查询语句的执行顺序</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">先找到要查询表格或连接要查询的表格，因此FROM才是第一步；</span><br><span class="line"></span><br><span class="line">接下来是进行条件筛选，所以是WHERE紧随其后；</span><br><span class="line"></span><br><span class="line">然后如果遇到表格有分组的需要，则需要先GROUP BY；</span><br><span class="line"></span><br><span class="line">分组时如果也存在筛选条件，这里就要用HAVING进行分组筛选；</span><br><span class="line"></span><br><span class="line">这些执行过后才是查询操作SELECT；</span><br><span class="line"></span><br><span class="line">SELECT的时候如果遇到重复数据，就需要去重，即使用DISTINCT;</span><br><span class="line"></span><br><span class="line">接下来如果要对查询后的数据进行排序，会用到ORDER BY；</span><br><span class="line"></span><br><span class="line">最后如果要指定返回的查询数据范围、条数则要用LIMIT/OFFSET函数。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MarkDown学习</title>
      <link href="/2023/03/11/markdawn/"/>
      <url>/2023/03/11/markdawn/</url>
      
        <content type="html"><![CDATA[<h1 id="MarkDown学习"><a href="#MarkDown学习" class="headerlink" title="MarkDown学习"></a>MarkDown学习</h1><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>#+空格创建标题，根据#数量创建不同级标题</p><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p>** ** 加粗</p><p><em>hello world</em>  斜体 一个*号</p><p>~~ ~~ 删除线</p><p><del>hello world</del></p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><blockquote><p>大于号</p></blockquote><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><p>三个-号或者三个*号</p><hr><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p><img src="https://raw.githubusercontent.com/wzhvv/image/main/image/202307062352946.jpg" alt="小王子"></p><p>!+[]+（图片路径）</p><h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><p><a href="https://wzhvv.github.io/">点击跳转到我的博客</a></p><p>[]+(地址)</p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><ol><li>1+.+空格</li><li>有序号的换行</li></ol><ul><li>-+空格</li><li>无序号的换行</li></ul><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p><img src="https://raw.githubusercontent.com/wzhvv/image/main/image/202307062352810.png" alt="表格的使用"></p><p>然后进入代码模式删掉之间的空格</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">​```+要写的代码样式，如java或c</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>

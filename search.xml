<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JavaWeb开发</title>
      <link href="/2023/03/23/JavaWeb/"/>
      <url>/2023/03/23/JavaWeb/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaWeb开发"><a href="#JavaWeb开发" class="headerlink" title="JavaWeb开发"></a>JavaWeb开发</h1><h2 id="HTML快速入门"><a href="#HTML快速入门" class="headerlink" title="HTML快速入门"></a>HTML快速入门</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>HTML入门<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>HELLO HTML<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">&quot;v2-ed0f23aed22d79c440935c9d1b0eb580_r.jpg&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>HTML标签不区分大小写</p></li><li><p>HTML标签属性值单双引号都可以</p></li><li><p>HTML语法松散</p><p>!加回车自动生成标准结构</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>maven</title>
      <link href="/2023/03/19/maven/"/>
      <url>/2023/03/19/maven/</url>
      
        <content type="html"><![CDATA[<h1 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h1><h2 id="maven基础概念"><a href="#maven基础概念" class="headerlink" title="maven基础概念"></a>maven基础概念</h2><h3 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h3><ul><li>仓库：用于存储资源，包含各种jar包</li><li>仓库分类：</li></ul><ol><li><p>本地仓库：自己电脑上存储资源的仓库，连接远程仓库获取资源</p></li><li><p>远程仓库：非本机电脑上的仓库，为本地仓库提供资源</p><p>中央仓库：Maven团队维护，存储所有资源的仓库</p><p>私服：部门&#x2F;公司范围内存储资源的仓库，从中央仓库获取资源</p></li><li><p>私服的作用：</p><p>保存具有版权的资源，包含购买和自主研发的jar</p><p>中央仓库中的jar都是开源的，不能存储具有版权的资源</p><p>一定范围内共享资源，仅对内部开放，不对外共享</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring学习</title>
      <link href="/2023/03/16/Spring/"/>
      <url>/2023/03/16/Spring/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><h2 id="1-充分解耦"><a href="#1-充分解耦" class="headerlink" title="1. 充分解耦"></a>1. 充分解耦</h2><ul><li>使用IOC容器管理bean(IOC)</li><li>在IOC容器内将有依赖关系的bean进行关系绑定(DI)</li><li>最终效果：使用对象时不仅可以直接从IOC容器中获取，并且获取到的bean已经绑定了所有的依赖关系</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>多线程随记</title>
      <link href="/2023/03/16/openmp/"/>
      <url>/2023/03/16/openmp/</url>
      
        <content type="html"><![CDATA[<h1 id="openmp多线程"><a href="#openmp多线程" class="headerlink" title="openmp多线程"></a>openmp多线程</h1><h2 id="1"><a href="#1" class="headerlink" title="1"></a>1</h2><ol><li>firstprivate</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">firstprivate</span>(a)在多线程中a继承主线程中a的值，不干预其他线程的值</span><br></pre></td></tr></table></figure><ol start="2"><li>lastprivate</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">lastprivate</span>(a)必须在有<span class="keyword">for</span>的多线程中使用，并继承最后的值</span><br></pre></td></tr></table></figure><ol start="3"><li>threadprivate</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#omp <span class="keyword">pragma</span> threadprivate(a)只能定义全局变量，且a可以在相同线程继承，不能在其他线程互通</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript</title>
      <link href="/2023/03/14/JavaScript/"/>
      <url>/2023/03/14/JavaScript/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript入门"><a href="#JavaScript入门" class="headerlink" title="JavaScript入门"></a>JavaScript入门</h1><h2 id="引入JavaScript"><a href="#引入JavaScript" class="headerlink" title="引入JavaScript"></a>引入JavaScript</h2><ol><li>内部脚本</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//........</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>    //可以出现多次，在html任意位置</span><br></pre></td></tr></table></figure><ol start="2"><li>外部脚本</li></ol><p>abs.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//........</span></span><br></pre></td></tr></table></figure><p>test.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;abs.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><h3 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h3><ul><li>var定义的变量可以存放不同类型的值</li><li>作用域比较大，全局变量</li><li>可以重复定义</li></ul><p>变量类型 变量名&#x3D;变量值;</p><p>js不区分整数和小数:</p><p>NAN          &#x2F;&#x2F;not a number</p><p>Infinity     &#x2F;&#x2F;表示无限大</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age=<span class="number">18</span>;</span><br><span class="line"><span class="keyword">var</span> name=<span class="string">&quot;张三&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="条件控制"><a href="#条件控制" class="headerlink" title="条件控制"></a>条件控制</h3><p>同java ,  console.log(age) 可以在浏览器的控制台打印变量信息</p><h3 id="等于"><a href="#等于" class="headerlink" title="等于"></a>等于</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">==    <span class="comment">//类型不一样，值一样，判断为true</span></span><br><span class="line">===   <span class="comment">//绝对等于，类型不一样，值一样，判断为false</span></span><br></pre></td></tr></table></figure><ul><li>NAN&#x3D;&#x3D;&#x3D;NAN,这个与所有值都不相等，包括自己。false</li><li>只能通过isNaN(NaN)来判断这个数是否是NaN</li></ul><h3 id="浮点数问题"><a href="#浮点数问题" class="headerlink" title="浮点数问题"></a>浮点数问题</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>/<span class="number">3</span>)===(<span class="number">1</span>-<span class="number">2</span>/<span class="number">3</span>)<span class="comment">//false</span></span><br></pre></td></tr></table></figure><blockquote><p>尽量避免使用浮点数进行运算，存在精度问题！</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Math</span>.<span class="title function_">abs</span>(<span class="number">1</span>/<span class="number">3</span>-(<span class="number">1</span>-<span class="number">2</span>/<span class="number">3</span>))&lt;<span class="number">0.00000001</span></span><br></pre></td></tr></table></figure><h3 id="null和undefined"><a href="#null和undefined" class="headerlink" title="null和undefined"></a>null和undefined</h3><ul><li>null                    &#x2F;&#x2F;空</li><li>undefined        &#x2F;&#x2F;未定义</li></ul><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><ul><li>Java的数值必须是相同类型的对象，JS中不需要这样</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">&#x27;hello&#x27;</span>,<span class="literal">null</span>,<span class="literal">true</span>];</span><br><span class="line"><span class="keyword">new</span> <span class="title function_">array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">&#x27;hello&#x27;</span>);</span><br></pre></td></tr></table></figure><p>取数组下标，如果越界了，就会:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">undefined</span></span><br></pre></td></tr></table></figure><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><ul><li>对象是大括号，数组中是中括号</li><li>JavaScript中所有的键都是字符串，值是任意对象！</li></ul><blockquote><p>每个属性之间使用逗号隔开，最后一个不需要添加</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 对象名=&#123;</span><br><span class="line">    属性名: 属性值;</span><br><span class="line">    属性名: 属性值;</span><br><span class="line">    属性名: 属性值</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Person person=new Person(1,2,3,4);</span></span><br><span class="line"><span class="keyword">var</span> person&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">3</span>,</span><br><span class="line">    <span class="attr">tags</span>:[<span class="string">&#x27;js&#x27;</span>,<span class="string">&#x27;java&#x27;</span>,<span class="string">&#x27;web&#x27;</span>]      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用一个不存在的对象属性，不会报错！</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">person.<span class="property">haha</span></span><br><span class="line"><span class="literal">undefined</span></span><br></pre></td></tr></table></figure><ul><li>动态的删减属性，通过delete删除对象的属性</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> person.<span class="property">name</span></span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li>动态的添加属性，直接给新的属性添加值即可</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">person.<span class="property">haha</span>=<span class="string">&quot;haha&quot;</span></span><br><span class="line"><span class="string">&quot;haha&quot;</span></span><br></pre></td></tr></table></figure><ul><li>判断属性值是否在这个对象中！xxx in xxx!</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;age&#x27;</span> <span class="keyword">in</span> person</span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li>判断一个属性是否是这个对象自身拥有的 hasOwnProperty()</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">person.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;toString&#x27;</span>)</span><br><span class="line"><span class="literal">false</span></span><br><span class="line">person.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;age&#x27;</span>)</span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="严格检查模式"><a href="#严格检查模式" class="headerlink" title="严格检查模式"></a>严格检查模式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>    <span class="comment">//严格检查模式，预防Javascript的随意性导致产生的一些问题，必须写在Javascript的第一行</span></span><br><span class="line"><span class="comment">//局部变量建议使用let去定义</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">stricpt</span>&gt;</span></span><br><span class="line">&#x27;use strict&#x27;;</span><br><span class="line">   let i=1; </span><br><span class="line"><span class="tag">&lt;/<span class="name">stricpt</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><ul><li>正常字符串我们使用单引号或双引号包裹</li><li>多行字符串编写</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> msg=</span><br><span class="line">    <span class="string">`hello</span></span><br><span class="line"><span class="string">world</span></span><br><span class="line"><span class="string">你好</span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure><ul><li>模板字符串</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name=<span class="string">&quot;张三&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> age=<span class="number">3</span>;</span><br><span class="line"><span class="keyword">let</span> msg=<span class="string">`你好呀,<span class="subst">$&#123;name&#125;</span>`</span></span><br><span class="line"><span class="comment">//let定义的是局部变量，不可重复声明</span></span><br></pre></td></tr></table></figure><ul><li>字符串的可变性：不可变</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(student[<span class="number">0</span>])---s</span><br><span class="line">student[<span class="number">0</span>]=<span class="number">1</span>---<span class="number">1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(student)---student</span><br></pre></td></tr></table></figure><ul><li>substring</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[)</span><br><span class="line"> student.<span class="title function_">substring</span>(<span class="number">1</span>)  <span class="comment">//从第一个字符串截取到最后一个字符串</span></span><br><span class="line"> student.<span class="title function_">substringt</span>(<span class="number">1</span>,<span class="number">3</span>)  <span class="comment">//[1,3)</span></span><br></pre></td></tr></table></figure><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>- </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql学习</title>
      <link href="/2023/03/12/mysql/"/>
      <url>/2023/03/12/mysql/</url>
      
        <content type="html"><![CDATA[<h1 id="基础MYSQL学习"><a href="#基础MYSQL学习" class="headerlink" title="基础MYSQL学习"></a>基础MYSQL学习</h1><h2 id="点击进入学习视频"><a href="#点击进入学习视频" class="headerlink" title="点击进入学习视频"></a><a href="https://www.bilibili.com/video/BV1Kr4y1i7ru?p=1&vd_source=807f4136109f993802c3f5a8bd0986c8">点击进入学习视频</a></h2><h2 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h2><h3 id="库操作"><a href="#库操作" class="headerlink" title="库操作"></a>库操作</h3><ul><li>查询所有数据库—show databases;</li><li>查询当前数据库—select database();</li><li>创建—create database[if not exists] 数据库名 [default charset 字符集] [collate 排序规则];</li><li>删除—drop database [if not exists] 数据库名</li><li>使用—use 数据库名</li></ul><h3 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h3><ul><li><p>创建—create table 表名(</p><p>字段1  字段1类型 [comment] 注释,</p><p>…….</p><p>)[comment 表注释];</p></li><li><p>查询—查询当前数据库所有表—show tables;</p></li></ul><p>​       查询表结构—desc 表名;</p><p>​       查询指定表的建表语句—show create table 表名;</p><ul><li><p>修改</p><p>—添加字段—alter table 表名 add 字段名 类型(长度) [comment 注释] [约束];</p></li></ul><p>​       —修改数据类型—alter table 表名 modify 字段名 新数据类型(长度);</p><p>​       —修改字段名和字段类型—alter table 表名 change 旧字段名 新字段名 类型(长度) [comment 注释] [约束];</p><p>​       —删除字段—alter table 表名 drop 字段名;</p><p>​       —修改表名—alter table 表名 rename to 新表名;</p><ul><li><p>删除</p><p>—删除表—drop table [if exits] 表名;</p></li></ul><p>​       —删除指定表，并重新创建该表，表中数据全被删除，表结构还在—truncate table 表名;</p><h2 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h2><h3 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h3><ul><li><p>insert into 表名 (字段1，字段2，…) values (值1，值2，…)                               —给指定字段添加数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into employee(id,name) values(1,&#x27;张三&#x27;);</span><br></pre></td></tr></table></figure></li><li><p>insert into 表名 values (值1，值2，…)                                                                —给全部字段添加数据</p></li><li><p>insert into 表名 (字段1，字段2，…) values (值1，值2，…),(值1，值2，…);    </p><p>insert into 表名 values (值1，值2，…),(值1，值2，…),(值1，值2，…);            —批量添加数据</p><ul><li>注意：</li><li>插入数据时，指定的字段顺序需要与值的顺序是一一对应的</li><li>字符串和日期型数据应该包含在引号中</li><li>插入的数据大小，应该在字段的规定范围内</li></ul></li></ul><h3 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h3><ul><li><p>update 表名 set 字段1&#x3D;值1,字段2&#x3D;值2,…..[where 一条件]</p></li><li><p>注意：修改语句的条件可以有，也可以没有，如果没有条件，则会修改整张表的数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update employee set name =&#x27;wzhvv&#x27;,gender=&#x27;男&#x27; where id=1;</span><br></pre></td></tr></table></figure></li></ul><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><ul><li>delete from 表名 [where 条件]</li><li>注意：delete语句的条件可以有，也可以没有，如果没有条件，则会删除整张表的所有数据</li><li>delete语句不能删除某一个字段的值(可以使用update)</li></ul><h2 id="DQL"><a href="#DQL" class="headerlink" title="DQL"></a>DQL</h2><h3 id="基本查询"><a href="#基本查询" class="headerlink" title="基本查询"></a>基本查询</h3><ul><li><p>查询多个字段</p><p>—select 字段1，字段2…from 表名;</p><p>—select * from 表名;</p></li><li><p>设置别名</p></li></ul><p>​       —select 字段1[as 别名1]，字段2[as 别名2]…from 表名;</p><ul><li><p>去除重复记录</p><p>—select distinct 字段列表 from 表名;</p></li><li><p>条件查询</p></li></ul><p>​        —select 字段列表 from 表名 where 条件列表;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;&gt;  or  !=     //不等于</span><br><span class="line">between and    //在某个范围之内（含最小，最大值）</span><br><span class="line">in(...)        //在in之后的列表中的值，多选一，满足其一即可</span><br><span class="line">例：select name from emp where id in(id=1,id=2);</span><br><span class="line">like &#x27;占位符&#x27;     //模糊匹配（&#x27;-&#x27;匹配单个字符，&#x27;%&#x27;匹配任意个字符）</span><br><span class="line">isnull         //是null</span><br></pre></td></tr></table></figure><ul><li>聚合函数</li></ul><p>​        —select 聚合函数（字段列表）from 表名;      &#x2F;&#x2F;null值不参与所有聚合函数运算</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">count      <span class="comment">//统计数量</span></span><br><span class="line">avg        <span class="comment">//平均值</span></span><br><span class="line">....</span><br><span class="line">select <span class="title function_">avg</span><span class="params">(e.salary)</span> from emp.e,dept d where e.dept_id=d.id and d.name=<span class="string">&#x27;研发部&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li>分组查询</li></ul><p>​        —select 字段列表 from 表名 [where 条件] group by 分组字段名 [having 分组后过滤条件]l;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">where和having区别</span><br><span class="line">    执行时机不同：where是分组之前进行过滤，不满足where条件，不参与分组，而having是分组之后对结果进行过滤。</span><br><span class="line">    判断条件不同：where不能对聚合函数进行判断，而having可以。</span><br><span class="line">    注意：</span><br><span class="line">       执行顺序：where&gt;聚合函数&gt;having</span><br><span class="line">       分组之后：查询的字段一般为聚合函数和分组字段，查询其他字段无意义。</span><br><span class="line">    select workaddress,count(*) from emp where age&lt;=45 group by workaddress having count(*)&gt;=3;</span><br></pre></td></tr></table></figure><ul><li>排序查询</li></ul><p>​        —select 字段列表 from 表名 order by 字段1 排序方式1，字段2 排序方式2;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">asc    <span class="comment">//升序（默认值）</span></span><br><span class="line">desc   <span class="comment">//降序</span></span><br><span class="line">    注意：</span><br><span class="line">        如果多字段排序，当第一个字段值相同时，才会根据第二个字段进行排序。</span><br><span class="line">        select name,age from emp where age &lt;=<span class="number">35</span> order by age asc ,entrydate desc;</span><br></pre></td></tr></table></figure><ul><li>分页查询</li></ul><p>​       —select 字段列表 from 表名 limit 起始索引，查询记录数;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">起始索引从<span class="number">0</span>开始，起始索引=（查询页码-<span class="number">1</span>）*每页显示记录数。</span><br><span class="line">    select * from emp where gender=<span class="string">&#x27;男&#x27;</span> and between <span class="number">20</span> and <span class="number">40</span> order by age,entrydate desc limit <span class="number">5</span>;</span><br></pre></td></tr></table></figure><h2 id="DCL"><a href="#DCL" class="headerlink" title="DCL"></a>DCL</h2><h3 id="管理用户"><a href="#管理用户" class="headerlink" title="管理用户"></a>管理用户</h3><ul><li>查询用户</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use mysql;</span><br><span class="line">select * from user;</span><br></pre></td></tr></table></figure><ul><li>创建用户</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create user &#x27;用户名&#x27; @ &#x27;主机名&#x27; identified by &#x27;密码&#x27;;   //主机名可以用%通配-&gt;任意主机都可访问</span><br></pre></td></tr></table></figure><ul><li>修改用户密码</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter user &#x27;用户名&#x27; @ &#x27;主机名&#x27; identified with mysql_native_password by &#x27;新密码&#x27;;</span><br></pre></td></tr></table></figure><ul><li>删除用户</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop user &#x27;用户名&#x27; @ &#x27;主机名&#x27;;</span><br></pre></td></tr></table></figure><h3 id="查询权限"><a href="#查询权限" class="headerlink" title="查询权限"></a>查询权限</h3><ul><li><p>权限表</p><p><img src="/mysql.assets/Snipaste_2023-03-25_20-03-18.png" alt="权限表"></p></li><li><p>查询权限</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show grants for &#x27;用户名&#x27; @ &#x27;主机名&#x27;;</span><br></pre></td></tr></table></figure><ul><li>授予权限</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant 权限列表 on 数据库名.表名 to &#x27;用户名&#x27; @ &#x27;主机名&#x27;;</span><br></pre></td></tr></table></figure><ul><li>撤销权限</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">revoke 权限列表 on 数据库名.表名 from &#x27;用户名&#x27; @ &#x27;主机名&#x27;;</span><br></pre></td></tr></table></figure><ul><li>注意：多个权限之间，使用逗号隔开</li><li>授权时，数据库名和表名可以使用*进行通配，代表所有。</li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 函数(参数)</span><br></pre></td></tr></table></figure><h3 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h3><ul><li><p>concat(s1,s2…sn)                             &#x2F;&#x2F;字符串拼接，s1,s2…sn拼接成一个字符串</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select concat(&#x27;hello&#x27;,&#x27;mysql&#x27;);    //hellomysql</span><br></pre></td></tr></table></figure></li><li><p>lower(str)                                          &#x2F;&#x2F;将字符串str全部转为小写</p></li><li><p>upper(str)                                         &#x2F;&#x2F;将字符串str全部转为大写</p></li><li><p>lapd(str,n,pad)                                 &#x2F;&#x2F;左填充，用字符串pad对str的左边进行填充，达到n个字符串长度</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select lpad(&#x27;01&#x27;,5,&#x27;-&#x27;);      //---01</span><br><span class="line">update emp set workno=lapd(workno,5,&#x27;0&#x27;);</span><br></pre></td></tr></table></figure></li><li><p>rpad(str,n,pad)                                &#x2F;&#x2F;右填充，用字符串pad对str的右边进行填充，达到n个字符串长度</p></li><li><p>trim(str)                                            &#x2F;&#x2F;去掉字符串头部和尾部的空格</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select trim(&#x27;  hello  mysqkl  &#x27;);       //hello mysql</span><br></pre></td></tr></table></figure></li><li><p>substring(str,start,len)                   &#x2F;&#x2F;返回从字符串str从start位置起的len个长度的字符串，索引从1开始</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select substring(&#x27;hello mysql&#x27;,1,7);     //hello m</span><br></pre></td></tr></table></figure></li></ul><h3 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h3><ul><li><p>ceil(x)                         &#x2F;&#x2F;向上取整</p></li><li><p>floor(x)                       &#x2F;&#x2F;向下取整</p></li><li><p>mod(x,y)                    &#x2F;&#x2F;返回x&#x2F;y的模，即x%y的值</p></li><li><p>rand()                         &#x2F;&#x2F;返回0-1的随机数</p></li><li><p>round(x,y)                  &#x2F;&#x2F;求参数x的四舍五入的值，保留y位小数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select lpad(round(rand()*1000000,0),6,&#x27;0&#x27;);</span><br></pre></td></tr></table></figure></li></ul><h3 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h3><ul><li><p>curdate()                                                                       &#x2F;&#x2F;返回当前日期</p></li><li><p>curtime()                                                                    &#x2F;&#x2F;返回当前时间</p></li><li><p>now()                                                                            &#x2F;&#x2F;返回当前日期和时间</p></li><li><p>YEAR(date)                                                                  &#x2F;&#x2F;获取指定date的年份</p></li><li><p>MONTH(date)                                                             &#x2F;&#x2F;获取指定date的月份</p></li><li><p>DAY(date)                                                                    &#x2F;&#x2F;获取指定date的日期</p></li><li><p>date_add(date,INTERVAL expr type)                      &#x2F;&#x2F;返回一个日期&#x2F;时间值加上一个时间间隔expr和type类型后的时间值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select date_add(now(),INTERVAL 70 DAY);</span><br></pre></td></tr></table></figure></li><li><p>datediff(date1,date2)                                               &#x2F;&#x2F;返回起始时间date1 和date2之间的天数，结果为date1-date2；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select datediff(&#x27;2021-09-01&#x27;,&#x27;2018-09-01&#x27;);</span><br><span class="line">select name,datediff(curdate(),entrydate) as &#x27;entrydays&#x27; from emp order by entrydays desc;</span><br></pre></td></tr></table></figure></li></ul><h3 id="流程函数"><a href="#流程函数" class="headerlink" title="流程函数"></a>流程函数</h3><ul><li>if(value,t,f)                                                                                            &#x2F;&#x2F;如果value为true，返回t，否则返回f</li><li>ifnull(value1,value2)                                                                           &#x2F;&#x2F;如果value1不为null，返回value1，否则返回value2</li><li>case when [val1] then [res1]…else[default] end                           &#x2F;&#x2F;如果val为true，返回res1，…否则返回default默认值</li><li>case [expr] when[val1] then [res1]…else [default] end               &#x2F;&#x2F;如果expr的值等于val1，返回res1， …否则返回default默认值</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select</span><br><span class="line">    name,</span><br><span class="line">    (case workaddress when &#x27;北京&#x27; then &#x27;一线城市&#x27; when &#x27;上海&#x27; then &#x27;一线城市&#x27; else &#x27;二线城市&#x27; end) as &#x27;工作地址&#x27;</span><br><span class="line">from emp;</span><br></pre></td></tr></table></figure><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ul><li>约束是作用于表中字段上的规则，用于限制存储在表中的数据。</li></ul><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><ul><li>保证数据库中数据的正确，有效性和完整性。</li></ul><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">非空约束 --- 限制该字段的数据不能为null --- not null</span><br><span class="line">唯一约束 --- 保证该字段的所有数据都是唯一，不重复的 --- unique</span><br><span class="line">主键约束 --- 主键是一行数据的唯一标识，要求非空且唯一 --- primary key</span><br><span class="line">默认约束 --- 保存数据时，如果未指定该字段的值，则采用默认值 --- default</span><br><span class="line">检查约束 --- 保证字段值满足某一个条件 --- check</span><br><span class="line">外键约束 --- 用来让两张表的数据之间建立连接，保证数据的一致性和完整性 --- foreign key</span><br><span class="line">注意：约束是作用于表中字段上的，可以在创建表/修改表的时候添加约束。</span><br></pre></td></tr></table></figure><h3 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h3><ul><li>添加外键</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">create table 表名&#123;</span><br><span class="line">字段名 数据类型,</span><br><span class="line">....</span><br><span class="line">[constraint(约束)] [外键名称] foreign key (外键字段名) references(引用) 主表(主表列名)</span><br><span class="line">&#125;;     //创建表时添加</span><br><span class="line">alter table 表名 add constraint 外键名称 foreign key (外键字段名) references 主表(主表列名);   //表结构创好时添加</span><br><span class="line">例：alter table emp add constraint fk_emp_dept_id foreign key (dept_id) references dept(id);</span><br></pre></td></tr></table></figure><ul><li>删除外键</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 drop foreign key 外键名称;</span><br></pre></td></tr></table></figure><ul><li>删除&#x2F;更新行为</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">not action --- 当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除/更新。(同restrich)</span><br><span class="line">restrich --- 当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除/更新。(同not action)</span><br><span class="line">cascade --- 当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有，则也删除/更新外键在子表中的记录。</span><br><span class="line">set null --- 当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则设置子表中该外键值为null(这就要求该外键允许取null)</span><br><span class="line">set default --- 父表有变更时，子表将外键列设置成一个默认的值(lnnodb不支持)</span><br><span class="line">alter table 表名 add constraint 外键名称 foreign key (外键字段) references 主表名(主表字段名) on update cascade(可变) on delete cascade(可变);</span><br></pre></td></tr></table></figure><h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><h3 id="多表关系"><a href="#多表关系" class="headerlink" title="多表关系"></a>多表关系</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">一对一 --- 在任意一方加入外键，关联另外一方的主键，并且设置外键为唯一的</span><br><span class="line">一对多 --- 在多的一方建立外键，指向一的一方的主键</span><br><span class="line">多对多 --- 建立第三张中间表，中间表至少包含两个外键，分别关联两方外键</span><br></pre></td></tr></table></figure><h3 id="多表查询-1"><a href="#多表查询-1" class="headerlink" title="多表查询"></a>多表查询</h3><ul><li>内连接</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">隐式内连接：select 字段列表 from 表1,表2 where 条件...;</span><br><span class="line">显式内链接：select 字段列表 from 表1 [inner](可删) join 表2 on 连接条件...;</span><br><span class="line">隐式内连接 语法更简单，显示内连接 效率更高，两个在查询结果上来说是相同的</span><br><span class="line">例：select e.name,e.age,e.job,d,name from emp e inner join dept d on e.dept_id=d.id where e.age&lt;30;</span><br></pre></td></tr></table></figure><ul><li>外连接</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">左外连接：select 字段列表 from 表1 left [outer](可删) join 表2 on 条件...;</span><br><span class="line">右外连接：select 字段列表 from 表1 right [outer](可删) join 表2 on 条件...;</span><br></pre></td></tr></table></figure><ul><li>自连接</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select 字段列表 from 表A 别名A join 表A 别名B on 条件...;</span><br><span class="line">自连接查询，可以是内连接查询，也可以是外连接查询。</span><br><span class="line">注意：必须使用表别名</span><br></pre></td></tr></table></figure><ul><li>联合查询</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select 字段列表 from 表A ...</span><br><span class="line">union [all]</span><br><span class="line">select 字段列表 from 表B ...;</span><br><span class="line">对于联合查询的多张表的列数必须保持一致，字段类型也必须保持一致</span><br><span class="line">union all会将全部的数据直接合并到一起，union会对合并后的数据去重</span><br></pre></td></tr></table></figure><ul><li>子查询</li></ul><ol><li>列子查询</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">子查询返回的结果是一列(可以是多行)，这种子查询称为列子查询。</span><br><span class="line">常用操作符：in , not in , any , some , all</span><br><span class="line">in --- 在指定的集合范围内，多选一</span><br><span class="line">not in --- 不在指定的集合范围内</span><br><span class="line">all --- 子查询返回列表中，在任意一个满足即可</span><br><span class="line">some --- 与any等同，使用some的地方都可以用any</span><br><span class="line">all --- 子查询返回列表的所有值都必须满足</span><br></pre></td></tr></table></figure><ol start="2"><li>行子查询</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">子查询返回的结果是一行(可以是多列)，这种子查询称为行子查询。</span><br><span class="line">常用的操作符：= , &lt;&gt; , in , not in</span><br></pre></td></tr></table></figure><ol start="3"><li>表字查询</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">子查询返回结果是多行多列，这种子查询称为表子查询</span><br><span class="line">常用的操作符：in</span><br></pre></td></tr></table></figure><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><h3 id="事务操作"><a href="#事务操作" class="headerlink" title="事务操作"></a>事务操作</h3><ul><li>查看&#x2F;设置事务提交方式</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select @@autocommit;</span><br><span class="line">set @@sutocommit=0;</span><br></pre></td></tr></table></figure><ul><li>提交事务</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">commit;</span><br></pre></td></tr></table></figure><ul><li>回滚事务</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rollback;</span><br></pre></td></tr></table></figure><ul><li>开启事务</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start transaction 或 begin</span><br></pre></td></tr></table></figure><p>提交事务和回滚事务同上</p><h3 id="事务四大特性"><a href="#事务四大特性" class="headerlink" title="事务四大特性"></a>事务四大特性</h3><ul><li>原子性(Atomicity):事务是不可分割的最小操作单元，要么全部成功，要么全部失败。</li><li>一致性(Consistency):事务完成时，必须使所有的数据都保持一致状态。</li><li>隔离性(Isolation):数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行。</li><li>持久性(Durability):事务一旦提交或回滚，它对数据库中的数据的改变就是永久的。</li></ul><h3 id="并发事务问题"><a href="#并发事务问题" class="headerlink" title="并发事务问题"></a>并发事务问题</h3><ul><li>脏读：一个事务读到另外一个事务还没有提交的数据。</li><li>不可重复读：一个事务先后读取同一条记录，但两次读取的数据不同，称之为不可重复读。</li><li>幻读：一个事务按照条件查询数据时，没有对应的数据行，但是在插入数据时，又发现这行数据已经存在，好像出现了幻影。</li></ul><h3 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h3><p><img src="/mysql.assets/Snipaste_2023-03-24_20-32-07.png" alt="事务隔离等级"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MarkDown学习</title>
      <link href="/2023/03/11/markdawn/"/>
      <url>/2023/03/11/markdawn/</url>
      
        <content type="html"><![CDATA[<h1 id="MarkDown学习"><a href="#MarkDown学习" class="headerlink" title="MarkDown学习"></a>MarkDown学习</h1><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>#+空格创建标题，根据#数量创建不同级标题</p><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p>** ** 加粗</p><p><em>hello world</em>  斜体 一个*号</p><p>~~ ~~ 删除线</p><p><del>hello world</del></p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><blockquote><p>大于号</p></blockquote><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><p>三个-号或者三个*号</p><hr><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>![小王子](C:\Users\27458\Pictures\Saved Pictures\v2-3903c39d4752e56c9617d42791d0c7f2_r.jpg)</p><p>!+[]+（图片路径）</p><h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><p><a href="https://wzhvv.github.io/">点击跳转到我的博客</a></p><p>[]+(地址)</p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><ol><li>1+.+空格</li><li>有序号的换行</li></ol><ul><li>-+空格</li><li>无序号的换行</li></ul><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>![表格的使用](C:\Users\27458\Pictures\Camera Roll\屏幕截图 2023-03-11 153044.png)</p><p>然后进入代码模式删掉之间的空格</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">​```+要写的代码样式，如java或c</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
